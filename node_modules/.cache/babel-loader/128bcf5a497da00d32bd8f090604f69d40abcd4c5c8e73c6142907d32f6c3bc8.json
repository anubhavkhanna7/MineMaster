{"ast":null,"code":"const openUpperRowTiles = (selectedIndex, updatedOpenedCellList, generatedGrid, mineSize) => {\n  const updatedIndex = selectedIndex - mineSize;\n  if (!updatedOpenedCellList[updatedIndex]) {\n    updatedOpenedCellList[updatedIndex] = 1;\n    generatedGrid[updatedIndex] === 0 && (updatedOpenedCellList = openSurroundingCells(updatedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n  }\n  if (updatedIndex % mineSize !== 0 && !updatedOpenedCellList[updatedIndex - 1]) {\n    updatedOpenedCellList[updatedIndex - 1] = 1;\n    generatedGrid[updatedIndex - 1] === 0 && (updatedOpenedCellList = openSurroundingCells(updatedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize));\n  }\n  if ((updatedIndex + 1) % mineSize !== 0 && !updatedOpenedCellList[updatedIndex + 1]) {\n    updatedOpenedCellList[updatedIndex + 1] = 1;\n    generatedGrid[updatedIndex + 1] === 0 && (updatedOpenedCellList = openSurroundingCells(updatedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize));\n  }\n  return updatedOpenedCellList;\n};\nconst openLowerRowTiles = (selectedIndex, updatedOpenedCellList, generatedGrid, mineSize) => {\n  const updatedIndex = selectedIndex + mineSize;\n  if (!updatedOpenedCellList[updatedIndex]) {\n    updatedOpenedCellList[updatedIndex] = 1;\n    generatedGrid[updatedIndex] === 0 && (updatedOpenedCellList = openSurroundingCells(updatedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n  }\n  if (updatedIndex % mineSize !== 0 && !updatedOpenedCellList[updatedIndex - 1]) {\n    updatedOpenedCellList[updatedIndex - 1] = 1;\n    generatedGrid[updatedIndex - 1] === 0 && (updatedOpenedCellList = openSurroundingCells(updatedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize));\n  }\n  if ((updatedIndex + 1) % mineSize !== 0 && !updatedOpenedCellList[updatedIndex + 1]) {\n    updatedOpenedCellList[updatedIndex + 1] = 1;\n    generatedGrid[updatedIndex + 1] === 0 && (updatedOpenedCellList = openSurroundingCells(updatedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize));\n  }\n  return updatedOpenedCellList;\n};\nexport const openSurroundingCells = (selectedIndex, updatedOpenedCellList, generatedGrid, mineSize) => {\n  updatedOpenedCellList[selectedIndex] = 1;\n  const isFirstRow = selectedIndex < mineSize;\n  const isLastRow = selectedIndex >= mineSize * (mineSize - 1);\n\n  // Open tiles below the selected tile\n  !isLastRow && (updatedOpenedCellList = openLowerRowTiles(selectedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n\n  // Open tiles above the selected tile\n  !isFirstRow && (updatedOpenedCellList = openUpperRowTiles(selectedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n  if (selectedIndex % mineSize !== 0 && !updatedOpenedCellList[selectedIndex - 1]) {\n    // Open tiles to the left of selected tile\n    updatedOpenedCellList[selectedIndex - 1] = 1;\n    generatedGrid[selectedIndex - 1] === 0 && (updatedOpenedCellList = openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize));\n  }\n  if ((selectedIndex + 1) % mineSize !== 0 && !updatedOpenedCellList[selectedIndex + 1]) {\n    // Open tiles to the right of selected tile\n    updatedOpenedCellList[selectedIndex + 1] = 1;\n    generatedGrid[selectedIndex + 1] === 0 && (updatedOpenedCellList = openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize));\n  }\n  return updatedOpenedCellList;\n};\nexport const matchAllOpenedTiles = (openedCellsList, generatedGrid) => {\n  let nonMineTilesUnopened = false;\n  openedCellsList.forEach((openedCell, index) => {\n    if (openedCell === 0 && generatedGrid[index] >= 0) {\n      nonMineTilesUnopened = true;\n    } else if (openedCell === -1 && generatedGrid[index] >= 0) {}\n  });\n  return !nonMineTilesUnopened;\n};","map":{"version":3,"names":["openUpperRowTiles","selectedIndex","updatedOpenedCellList","generatedGrid","mineSize","updatedIndex","openSurroundingCells","openLowerRowTiles","isFirstRow","isLastRow","matchAllOpenedTiles","openedCellsList","nonMineTilesUnopened","forEach","openedCell","index"],"sources":["/Users/anubhavkhanna/Desktop/Code Repos/minemaster/src/utils/Utilities.ts"],"sourcesContent":["const openUpperRowTiles = (selectedIndex: number, updatedOpenedCellList: Array<number>, generatedGrid: Array<number>, mineSize: number) => {\n  const updatedIndex = selectedIndex-mineSize;\n  if(!updatedOpenedCellList[updatedIndex]) {\n    updatedOpenedCellList[updatedIndex] = 1;\n    (generatedGrid[updatedIndex] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n  }\n  if ((updatedIndex%mineSize) !== 0 && !updatedOpenedCellList[updatedIndex - 1]) {\n    updatedOpenedCellList[updatedIndex - 1] = 1;\n    (generatedGrid[updatedIndex - 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize));\n  }\n  if (((updatedIndex+1)%mineSize) !== 0 && !updatedOpenedCellList[updatedIndex + 1]) {\n    updatedOpenedCellList[updatedIndex + 1] = 1;\n    (generatedGrid[updatedIndex + 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize));\n  }\n  return updatedOpenedCellList;\n}\n\nconst openLowerRowTiles = (selectedIndex: number, updatedOpenedCellList: Array<number>, generatedGrid: Array<number>, mineSize: number) => {\n  const updatedIndex = selectedIndex+mineSize;\n  if(!updatedOpenedCellList[updatedIndex]) {\n    updatedOpenedCellList[updatedIndex] = 1;\n    (generatedGrid[updatedIndex] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n  }\n  if ((updatedIndex%mineSize) !== 0 && !updatedOpenedCellList[updatedIndex - 1]) {\n    updatedOpenedCellList[updatedIndex - 1] = 1;\n    (generatedGrid[updatedIndex - 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize));\n  }\n  if(((updatedIndex+1)%mineSize) !== 0 && !updatedOpenedCellList[updatedIndex + 1]) {\n    updatedOpenedCellList[updatedIndex + 1] = 1;\n    (generatedGrid[updatedIndex + 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize));\n  }\n  return updatedOpenedCellList;\n}\n\nexport const openSurroundingCells = (selectedIndex: number, updatedOpenedCellList: Array<number>, generatedGrid: Array<number>, mineSize: number) => {\n  updatedOpenedCellList[selectedIndex] = 1;\n    const isFirstRow = selectedIndex < (mineSize);\n    const isLastRow = selectedIndex >= (mineSize*(mineSize-1));\n\n    // Open tiles below the selected tile\n    !isLastRow && (updatedOpenedCellList = openLowerRowTiles(selectedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n\n    // Open tiles above the selected tile\n    !isFirstRow && (updatedOpenedCellList = openUpperRowTiles(selectedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n\n    if((selectedIndex%mineSize) !== 0 && !updatedOpenedCellList[selectedIndex - 1]) {\n      // Open tiles to the left of selected tile\n      updatedOpenedCellList[selectedIndex - 1] = 1;\n      (generatedGrid[selectedIndex - 1] === 0) && (updatedOpenedCellList = openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize));\n    }\n    if(((selectedIndex+1)%mineSize) !== 0 && !updatedOpenedCellList[selectedIndex + 1] ) {\n      // Open tiles to the right of selected tile\n      updatedOpenedCellList[selectedIndex + 1] = 1;\n      (generatedGrid[selectedIndex + 1] === 0) && (updatedOpenedCellList = openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize));\n    }\n    return updatedOpenedCellList;\n}\n\nexport const matchAllOpenedTiles = (openedCellsList: Array<number>, generatedGrid: Array<number>) => {\n  let nonMineTilesUnopened = false;\n  openedCellsList.forEach((openedCell, index) => {\n    if (openedCell === 0 && generatedGrid[index] >= 0) {\n      nonMineTilesUnopened = true;\n    } else if (openedCell === -1 && generatedGrid[index] >= 0) {\n\n    }\n  });\n  return !nonMineTilesUnopened;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}