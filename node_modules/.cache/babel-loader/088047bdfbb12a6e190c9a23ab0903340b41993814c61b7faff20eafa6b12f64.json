{"ast":null,"code":"var _jsxFileName = \"/Users/anubhavkhanna/Desktop/Code Repos/minemaster/src/Components/MineGrid.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport calculateMatrix from '../utils/gridGenerator';\nimport './MineGrid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MineGrid() {\n  _s();\n  const mineSize = 9,\n    dificulty = 'EASY';\n  const [isBombClicked, setIsBombClicked] = useState(false);\n  const [openedCellsList, setOpenedCellsList] = useState(new Array(mineSize * mineSize).fill(0));\n  const [generatedGrid, updateGeneratedGrid] = useState(new Array(mineSize * mineSize));\n  useEffect(() => {\n    updateGeneratedGrid(calculateMatrix());\n  }, []);\n  const openSurroundingCells = () => {\n    const updatedOpenedCellList = [...openedCellsList];\n  };\n  const onClickCell = selectedIndex => {\n    if (generatedGrid[selectedIndex]) {\n      const updatedOpenedCellList = [...openedCellsList];\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList);\n    } else {\n      updatedOpenedCellList[selectedIndex] = 1;\n      const isFirstRow = selectedIndex < mineSize;\n      const isLastRow = selectedIndex >= mineSize * (mineSize - 1);\n      if (!isLastRow) {\n        const updatedIndex = selectedIndex + mineSize;\n        updatedOpenedCellList[updatedIndex] = 1;\n        updatedIndex % mineSize !== 0 && (updatedOpenedCellList[updatedIndex - 1] = 1);\n        (updatedIndex + 1) % mineSize !== 0 && (updatedOpenedCellList[updatedIndex + 1] = 1);\n      }\n      if (!isFirstRow) {\n        const updatedIndex = selectedIndex - mineSize;\n        updatedOpenedCellList[updatedIndex] = 1;\n        updatedIndex % mineSize !== 0 && (updatedOpenedCellList[updatedIndex - 1] = 1);\n        (updatedIndex + 1) % mineSize !== 0 && (updatedOpenedCellList[updatedIndex + 1] = 1);\n      }\n      selectedIndex % mineSize !== 0 && (updatedOpenedCellList[selectedIndex - 1] = 1);\n      (selectedIndex + 1) % mineSize !== 0 && (updatedOpenedCellList[selectedIndex + 1] = 1);\n      setOpenedCellsList(updatedOpenedCellList);\n    }\n  };\n  const returnMineRows = () => {\n    return generatedGrid.map((gridValue, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mineTile ${openedCellsList[index] === 1 && 'not-A-Mine'} ${openedCellsList[index] === 1 && gridValue === -1 && 'mine'}`,\n      onClick: () => onClickCell(index),\n      children: openedCellsList[index] ? gridValue : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: returnMineRows()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(MineGrid, \"pBAchyCba9drX2bvWQgT/Ivl8u4=\");\n_c = MineGrid;\nexport default MineGrid;\nvar _c;\n$RefreshReg$(_c, \"MineGrid\");","map":{"version":3,"names":["useEffect","useState","calculateMatrix","jsxDEV","_jsxDEV","MineGrid","_s","mineSize","dificulty","isBombClicked","setIsBombClicked","openedCellsList","setOpenedCellsList","Array","fill","generatedGrid","updateGeneratedGrid","openSurroundingCells","updatedOpenedCellList","onClickCell","selectedIndex","isFirstRow","isLastRow","updatedIndex","returnMineRows","map","gridValue","index","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/anubhavkhanna/Desktop/Code Repos/minemaster/src/Components/MineGrid.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport calculateMatrix from '../utils/gridGenerator';\nimport './MineGrid.css'\n\nfunction MineGrid() {\n  const mineSize = 9, dificulty = 'EASY';\n  const [isBombClicked, setIsBombClicked] = useState(false);\n  const [openedCellsList, setOpenedCellsList] = useState(new Array(mineSize*mineSize).fill(0));\n  const [generatedGrid, updateGeneratedGrid] = useState(new Array(mineSize*mineSize));\n  useEffect(() => {\n    updateGeneratedGrid(calculateMatrix());\n  }, []);\n\n  const openSurroundingCells = () => {\n    const updatedOpenedCellList = [...openedCellsList]\n  }\n\n  const onClickCell = (selectedIndex: number) => {\n    if (generatedGrid[selectedIndex]) {\n      const updatedOpenedCellList = [...openedCellsList]\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList)\n    } else {\n      updatedOpenedCellList[selectedIndex] = 1;\n      const isFirstRow = selectedIndex < (mineSize);\n      const isLastRow = selectedIndex >= (mineSize*(mineSize-1));\n      if (!isLastRow) {\n        const updatedIndex = selectedIndex+mineSize;\n        updatedOpenedCellList[updatedIndex] = 1;\n        (updatedIndex%mineSize) !== 0 && (updatedOpenedCellList[updatedIndex - 1] = 1);\n        ((updatedIndex+1)%mineSize) !== 0 && (updatedOpenedCellList[updatedIndex + 1] = 1);\n      }\n      if (!isFirstRow) {\n        const updatedIndex = selectedIndex-mineSize;\n        updatedOpenedCellList[updatedIndex] = 1;\n        (updatedIndex%mineSize) !== 0 && (updatedOpenedCellList[updatedIndex - 1] = 1);\n        ((updatedIndex+1)%mineSize) !== 0 && (updatedOpenedCellList[updatedIndex + 1] = 1);\n      }\n      (selectedIndex%mineSize) !== 0 && (updatedOpenedCellList[selectedIndex - 1] = 1);\n      ((selectedIndex+1)%mineSize) !== 0 && (updatedOpenedCellList[selectedIndex + 1] = 1);\n      setOpenedCellsList(updatedOpenedCellList);\n    }\n  }\n\n  const returnMineRows = () => {\n    return generatedGrid.map((gridValue: number, index: number) => (\n      <div\n        className={`mineTile ${openedCellsList[index] === 1 && 'not-A-Mine'} ${openedCellsList[index] === 1 && gridValue === -1 && 'mine'}`}\n        onClick={() => onClickCell(index)}\n      >\n          {openedCellsList[index] ? gridValue : ''}\n      </div>\n    ))\n  }\n\n\n  return (\n    <div className='container'>\n      {returnMineRows()}\n    </div>\n  );\n}\n\nexport default MineGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}