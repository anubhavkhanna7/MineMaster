{"ast":null,"code":"function createdGridWithMines(totalTiles,mineCount){let grid=Array(totalTiles).fill(0);while(mineCount>0){let mineTile=Math.floor(Math.random()*totalTiles);if(grid[mineTile]!==-1){grid[mineTile]=-1;mineCount--;}}return grid;}function fillMineHints(createdGrid,colLength){let rowLength=Math.floor(createdGrid.length/colLength);for(let rowIndex=0;rowIndex<rowLength;rowIndex++){for(let colIndex=0;colIndex<colLength;colIndex++){let sum=0;if(createdGrid[rowIndex*colLength+colIndex]!==-1){if(rowIndex===0&&colIndex===0){sum+=createdGrid[rowIndex*colLength+colIndex+1]===-1?1:0;sum+=createdGrid[(rowIndex+1)*colLength+colIndex]===-1?1:0;sum+=createdGrid[(rowIndex+1)*colLength+colIndex+1]===-1?1:0;}else if(rowIndex===0&&colIndex!==colLength-1){sum+=createdGrid[rowIndex*colLength+colIndex-1]===-1?1:0;sum+=createdGrid[rowIndex*colLength+colIndex+1]===-1?1:0;sum+=createdGrid[(rowIndex+1)*colLength+colIndex-1]===-1?1:0;sum+=createdGrid[(rowIndex+1)*colLength+colIndex]===-1?1:0;sum+=createdGrid[(rowIndex+1)*colLength+colIndex+1]===-1?1:0;}else if(rowIndex===0&&colIndex===colLength-1){sum+=createdGrid[rowIndex*colLength+colIndex-1]===-1?1:0;sum+=createdGrid[(rowIndex+1)*colLength+colIndex-1]===-1?1:0;sum+=createdGrid[(rowIndex+1)*colLength+colIndex]===-1?1:0;}else if(rowIndex!==rowLength-1&&colIndex===0){sum+=createdGrid[(rowIndex-1)*colLength+colIndex]===-1?1:0;sum+=createdGrid[(rowIndex+1)*colLength+colIndex]===-1?1:0;sum+=createdGrid[(rowIndex-1)*colLength+colIndex+1]===-1?1:0;sum+=createdGrid[rowIndex*colLength+colIndex+1]===-1?1:0;sum+=createdGrid[(rowIndex+1)*colLength+colIndex+1]===-1?1:0;}else if(rowIndex===rowLength-1&&colIndex===0){sum+=createdGrid[(rowIndex-1)*colLength+colIndex]===-1?1:0;sum+=createdGrid[(rowIndex-1)*colLength+colIndex+1]===-1?1:0;sum+=createdGrid[rowIndex*colLength+colIndex+1]===-1?1:0;}else{sum+=createdGrid[(rowIndex-1)*colLength+colIndex-1]===-1?1:0;sum+=createdGrid[rowIndex*colLength+colIndex-1]===-1?1:0;sum+=createdGrid[(rowIndex+1)*colLength+colIndex-1]===-1?1:0;sum+=createdGrid[(rowIndex-1)*colLength+colIndex]===-1?1:0;sum+=createdGrid[(rowIndex+1)*colLength+colIndex]===-1?1:0;sum+=createdGrid[(rowIndex-1)*colLength+colIndex+1]===-1?1:0;sum+=createdGrid[rowIndex*colLength+colIndex+1]===-1?1:0;sum+=createdGrid[(rowIndex+1)*colLength+colIndex+1]===-1?1:0;}createdGrid[rowIndex*colLength+colIndex]=sum;}}}return createdGrid;}export default function calculateMatrix(){let size=arguments.length>0&&arguments[0]!==undefined?arguments[0]:9;let dificulty=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'EASY';let customMines=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;let totalTiles=size*size;let countOfMines=0;switch(dificulty){case'NOVICE':countOfMines=totalTiles*10/100;break;case'EASY':countOfMines=totalTiles*15/100;break;case'MEDIUM':countOfMines=totalTiles*20/100;break;case'HARD':countOfMines=totalTiles*25/100;break;case'EXTREME':countOfMines=totalTiles*30/100;break;case'INSANE':countOfMines=totalTiles*35/100;break;case'CUSTOM':countOfMines=customMines;break;}return fillMineHints(createdGridWithMines(totalTiles,countOfMines),size);}","map":{"version":3,"names":["createdGridWithMines","totalTiles","mineCount","grid","Array","fill","mineTile","Math","floor","random","fillMineHints","createdGrid","colLength","rowLength","length","rowIndex","colIndex","sum","calculateMatrix","size","arguments","undefined","dificulty","customMines","countOfMines"],"sources":["/Users/anubhavkhanna/Desktop/Code Repos/MineMaster/src/utils/gridGenerator.ts"],"sourcesContent":["function createdGridWithMines(totalTiles: number, mineCount: number) {\n  let grid = Array(totalTiles).fill(0);\n  while (mineCount > 0) {\n    let mineTile = Math.floor(Math.random() * (totalTiles));\n    if(grid[mineTile] !== -1) {\n      grid[mineTile] = -1;\n      mineCount--;\n    }\n  }\n  return grid;\n}\n\nfunction fillMineHints(createdGrid: Array<number>, colLength: number) {\n  let rowLength = Math.floor(createdGrid.length/colLength);\n  for (let rowIndex = 0; rowIndex < rowLength; rowIndex++) {\n    for (let colIndex = 0; colIndex<colLength; colIndex++) {\n      let sum = 0;\n      if(createdGrid[rowIndex*colLength + colIndex] !== -1) {\n        if(rowIndex === 0 && colIndex === 0) {\n          sum+= createdGrid[rowIndex*colLength + colIndex+1] === -1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex] === -1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex+1] === -1 ? 1 : 0;\n        } else if (rowIndex === 0 && colIndex !== colLength-1) {\n          sum+= createdGrid[rowIndex*colLength + colIndex-1] ===-1 ? 1 : 0;\n          sum+= createdGrid[rowIndex*colLength + colIndex+1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex-1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex+1] ===-1 ? 1 : 0;\n        } else if (rowIndex === 0 && colIndex === colLength-1) {\n          sum+= createdGrid[rowIndex*colLength + colIndex-1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex-1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex] ===-1 ? 1 : 0;\n        } else if (rowIndex !== rowLength-1 && colIndex === 0) {\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex + 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[rowIndex*colLength + colIndex + 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex + 1] ===-1 ? 1 : 0;\n        } else if (rowIndex === rowLength-1 && colIndex === 0) {\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex + 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[rowIndex*colLength + colIndex + 1] ===-1 ? 1 : 0;\n        } else {\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex - 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[rowIndex*colLength + colIndex - 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex - 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex + 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[rowIndex*colLength + colIndex + 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex + 1] ===-1 ? 1 : 0;\n        }\n        createdGrid[rowIndex*colLength + colIndex] = sum;\n      }\n    }\n  }\n  return createdGrid;\n}\n\nexport default function calculateMatrix(size = 9, dificulty = 'EASY', customMines = 0) {\n  let totalTiles = size * size;\n  let countOfMines = 0;\n  switch (dificulty) {\n    case 'NOVICE':\n      countOfMines = (totalTiles*10)/100;\n      break;\n    case 'EASY':\n      countOfMines = (totalTiles*15)/100;\n      break;\n    case 'MEDIUM':\n      countOfMines = (totalTiles*20)/100;\n      break;\n    case 'HARD':\n      countOfMines = (totalTiles*25)/100;\n      break;\n    case 'EXTREME':\n      countOfMines = (totalTiles*30)/100;\n      break;\n    case 'INSANE':\n      countOfMines = (totalTiles*35)/100;\n      break;\n    case 'CUSTOM':\n      countOfMines = customMines;\n      break;\n  }\n  return fillMineHints(createdGridWithMines(totalTiles, countOfMines), size);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}