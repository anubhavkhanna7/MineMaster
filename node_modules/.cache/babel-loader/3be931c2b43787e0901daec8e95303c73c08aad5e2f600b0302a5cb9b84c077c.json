{"ast":null,"code":"var _jsxFileName = \"/Users/anubhavkhanna/Desktop/Code Repos/minemaster/src/Components/MineGrid.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport calculateMatrix from '../utils/gridGenerator';\nimport './MineGrid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MineGrid() {\n  _s();\n  const mineSize = 9,\n    dificulty = 'EASY';\n  const [isBombClicked, setIsBombClicked] = useState(false);\n  const [openedCellsList, setOpenedCellsList] = useState(new Array(mineSize * mineSize).fill(0));\n  const [generatedGrid, updateGeneratedGrid] = useState(new Array(mineSize * mineSize));\n  useEffect(() => {\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n  }, []);\n  const upperRowTiles = () => {};\n  const openSurroundingCells = (selectedIndex, updatedOpenedCellList) => {\n    console.log(selectedIndex);\n    updatedOpenedCellList[selectedIndex] = 1;\n    const isFirstRow = selectedIndex < mineSize;\n    const isLastRow = selectedIndex >= mineSize * (mineSize - 1);\n    // Open tiles below the selected tile\n    if (!isLastRow) {\n      const updatedIndex = selectedIndex + mineSize;\n      updatedOpenedCellList[updatedIndex] = 1;\n      generatedGrid[updatedIndex] === 0 && (updatedOpenedCellList = openSurroundingCells(updatedIndex, updatedOpenedCellList));\n      if (updatedIndex % mineSize !== 0) {\n        updatedOpenedCellList[updatedIndex - 1] = 1;\n        generatedGrid[updatedIndex - 1] === 0 && (updatedOpenedCellList = openSurroundingCells(updatedIndex - 1, updatedOpenedCellList));\n      }\n      if ((updatedIndex + 1) % mineSize !== 0) {\n        updatedOpenedCellList[updatedIndex + 1] = 1;\n        generatedGrid[updatedIndex + 1] === 0 && (updatedOpenedCellList = openSurroundingCells(updatedIndex + 1, updatedOpenedCellList));\n      }\n    }\n    // Open tiles above the selected tile\n    if (!isFirstRow) {\n      const updatedIndex = selectedIndex - mineSize;\n      updatedOpenedCellList[updatedIndex] = 1;\n      generatedGrid[updatedIndex] === 0 && (updatedOpenedCellList = openSurroundingCells(updatedIndex, updatedOpenedCellList));\n      if (updatedIndex % mineSize !== 0) {\n        updatedOpenedCellList[updatedIndex - 1] = 1;\n        // (generatedGrid[updatedIndex - 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex - 1, updatedOpenedCellList));\n      }\n\n      if ((updatedIndex + 1) % mineSize !== 0) {\n        updatedOpenedCellList[updatedIndex + 1] = 1;\n        // (generatedGrid[updatedIndex + 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex + 1, updatedOpenedCellList));\n      }\n    }\n    // Open tiles to the left of selected tile\n    if (selectedIndex % mineSize !== 0) {\n      updatedOpenedCellList[selectedIndex - 1] = 1;\n      // (generatedGrid[selectedIndex - 1] === 0) && (updatedOpenedCellList = openSurroundingCells(selectedIndex - 1, updatedOpenedCellList));\n    }\n    // Open tiles to the right of selected tile\n    if ((selectedIndex + 1) % mineSize !== 0) {\n      updatedOpenedCellList[selectedIndex + 1] = 1;\n      // (generatedGrid[selectedIndex + 1] === 0) && (updatedOpenedCellList = openSurroundingCells(selectedIndex + 1, updatedOpenedCellList));\n    }\n\n    return updatedOpenedCellList;\n  };\n  const onClickCell = selectedIndex => {\n    const updatedOpenedCellList = [...openedCellsList];\n    if (generatedGrid[selectedIndex]) {\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList);\n    } else {\n      setOpenedCellsList(openSurroundingCells(selectedIndex, updatedOpenedCellList));\n\n      // setOpenedCellsList(updatedOpenedCellList);\n    }\n  };\n\n  const returnMineRows = () => {\n    return generatedGrid.map((gridValue, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mineTile ${openedCellsList[index] === 1 && 'not-A-Mine'} ${openedCellsList[index] === 1 && gridValue === -1 && 'mine'}`,\n      onClick: () => onClickCell(index),\n      children: openedCellsList[index] ? gridValue : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: returnMineRows()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(MineGrid, \"pBAchyCba9drX2bvWQgT/Ivl8u4=\");\n_c = MineGrid;\nexport default MineGrid;\nvar _c;\n$RefreshReg$(_c, \"MineGrid\");","map":{"version":3,"names":["useEffect","useState","calculateMatrix","jsxDEV","_jsxDEV","MineGrid","_s","mineSize","dificulty","isBombClicked","setIsBombClicked","openedCellsList","setOpenedCellsList","Array","fill","generatedGrid","updateGeneratedGrid","upperRowTiles","openSurroundingCells","selectedIndex","updatedOpenedCellList","console","log","isFirstRow","isLastRow","updatedIndex","onClickCell","returnMineRows","map","gridValue","index","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/anubhavkhanna/Desktop/Code Repos/minemaster/src/Components/MineGrid.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport calculateMatrix from '../utils/gridGenerator';\nimport './MineGrid.css'\n\nfunction MineGrid() {\n  const mineSize = 9, dificulty = 'EASY';\n  const [isBombClicked, setIsBombClicked] = useState(false);\n  const [openedCellsList, setOpenedCellsList] = useState(new Array(mineSize*mineSize).fill(0));\n  const [generatedGrid, updateGeneratedGrid] = useState(new Array(mineSize*mineSize));\n  useEffect(() => {\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n  }, []);\n\n  const upperRowTiles = () => {\n    \n  }\n\n  const openSurroundingCells = (selectedIndex: number, updatedOpenedCellList: any) => {\n    console.log(selectedIndex)\n    updatedOpenedCellList[selectedIndex] = 1;\n      const isFirstRow = selectedIndex < (mineSize);\n      const isLastRow = selectedIndex >= (mineSize*(mineSize-1));\n      // Open tiles below the selected tile\n      if (!isLastRow) {\n        const updatedIndex = selectedIndex+mineSize;\n        updatedOpenedCellList[updatedIndex] = 1;\n        (generatedGrid[updatedIndex] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex, updatedOpenedCellList));\n        if ((updatedIndex%mineSize) !== 0) {\n          updatedOpenedCellList[updatedIndex - 1] = 1;\n          (generatedGrid[updatedIndex - 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex - 1, updatedOpenedCellList));\n        }\n        if(((updatedIndex+1)%mineSize) !== 0) {\n          updatedOpenedCellList[updatedIndex + 1] = 1;\n          (generatedGrid[updatedIndex + 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex + 1, updatedOpenedCellList));\n        }\n      }\n      // Open tiles above the selected tile\n      if (!isFirstRow) {\n        const updatedIndex = selectedIndex-mineSize;\n        updatedOpenedCellList[updatedIndex] = 1;\n        (generatedGrid[updatedIndex] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex, updatedOpenedCellList));\n        if ((updatedIndex%mineSize) !== 0) {\n          updatedOpenedCellList[updatedIndex - 1] = 1;\n          // (generatedGrid[updatedIndex - 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex - 1, updatedOpenedCellList));\n        }\n        if (((updatedIndex+1)%mineSize) !== 0) {\n          updatedOpenedCellList[updatedIndex + 1] = 1;\n          // (generatedGrid[updatedIndex + 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex + 1, updatedOpenedCellList));\n        }\n      }\n      // Open tiles to the left of selected tile\n      if((selectedIndex%mineSize) !== 0) {\n        updatedOpenedCellList[selectedIndex - 1] = 1;\n        // (generatedGrid[selectedIndex - 1] === 0) && (updatedOpenedCellList = openSurroundingCells(selectedIndex - 1, updatedOpenedCellList));\n      }\n      // Open tiles to the right of selected tile\n      if(((selectedIndex+1)%mineSize) !== 0) {\n        updatedOpenedCellList[selectedIndex + 1] = 1;\n        // (generatedGrid[selectedIndex + 1] === 0) && (updatedOpenedCellList = openSurroundingCells(selectedIndex + 1, updatedOpenedCellList));\n      }\n      return updatedOpenedCellList;\n  }\n\n  const onClickCell = (selectedIndex: number) => {\n    const updatedOpenedCellList = [...openedCellsList];\n    if (generatedGrid[selectedIndex]) {\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList)\n    } else {\n      setOpenedCellsList(openSurroundingCells(selectedIndex, updatedOpenedCellList));\n      \n      // setOpenedCellsList(updatedOpenedCellList);\n    }\n  }\n\n  const returnMineRows = () => {\n    return generatedGrid.map((gridValue: number, index: number) => (\n      <div\n        className={`mineTile ${openedCellsList[index] === 1 && 'not-A-Mine'} ${openedCellsList[index] === 1 && gridValue === -1 && 'mine'}`}\n        onClick={() => onClickCell(index)}\n      >\n          {openedCellsList[index] ? gridValue : ''}\n      </div>\n    ))\n  }\n\n\n  return (\n    <div className='container'>\n      {returnMineRows()}\n    </div>\n  );\n}\n\nexport default MineGrid;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,eAAe,MAAM,wBAAwB;AACpD,OAAO,gBAAgB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvB,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAG,CAAC;IAAEC,SAAS,GAAG,MAAM;EACtC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,IAAIY,KAAK,CAACN,QAAQ,GAACA,QAAQ,CAAC,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5F,MAAM,CAACC,aAAa,EAAEC,mBAAmB,CAAC,GAAGf,QAAQ,CAAC,IAAIY,KAAK,CAACN,QAAQ,GAACA,QAAQ,CAAC,CAAC;EACnFP,SAAS,CAAC,MAAM;IACdgB,mBAAmB,CAACd,eAAe,CAACK,QAAQ,EAAEC,SAAS,CAAC,CAAC;EAC3D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,aAAa,GAAGA,CAAA,KAAM,CAE5B,CAAC;EAED,MAAMC,oBAAoB,GAAGA,CAACC,aAAqB,EAAEC,qBAA0B,KAAK;IAClFC,OAAO,CAACC,GAAG,CAACH,aAAa,CAAC;IAC1BC,qBAAqB,CAACD,aAAa,CAAC,GAAG,CAAC;IACtC,MAAMI,UAAU,GAAGJ,aAAa,GAAIZ,QAAS;IAC7C,MAAMiB,SAAS,GAAGL,aAAa,IAAKZ,QAAQ,IAAEA,QAAQ,GAAC,CAAC,CAAE;IAC1D;IACA,IAAI,CAACiB,SAAS,EAAE;MACd,MAAMC,YAAY,GAAGN,aAAa,GAACZ,QAAQ;MAC3Ca,qBAAqB,CAACK,YAAY,CAAC,GAAG,CAAC;MACtCV,aAAa,CAACU,YAAY,CAAC,KAAK,CAAC,KAAML,qBAAqB,GAAGF,oBAAoB,CAACO,YAAY,EAAEL,qBAAqB,CAAC,CAAC;MAC1H,IAAKK,YAAY,GAAClB,QAAQ,KAAM,CAAC,EAAE;QACjCa,qBAAqB,CAACK,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC;QAC1CV,aAAa,CAACU,YAAY,GAAG,CAAC,CAAC,KAAK,CAAC,KAAML,qBAAqB,GAAGF,oBAAoB,CAACO,YAAY,GAAG,CAAC,EAAEL,qBAAqB,CAAC,CAAC;MACpI;MACA,IAAI,CAACK,YAAY,GAAC,CAAC,IAAElB,QAAQ,KAAM,CAAC,EAAE;QACpCa,qBAAqB,CAACK,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC;QAC1CV,aAAa,CAACU,YAAY,GAAG,CAAC,CAAC,KAAK,CAAC,KAAML,qBAAqB,GAAGF,oBAAoB,CAACO,YAAY,GAAG,CAAC,EAAEL,qBAAqB,CAAC,CAAC;MACpI;IACF;IACA;IACA,IAAI,CAACG,UAAU,EAAE;MACf,MAAME,YAAY,GAAGN,aAAa,GAACZ,QAAQ;MAC3Ca,qBAAqB,CAACK,YAAY,CAAC,GAAG,CAAC;MACtCV,aAAa,CAACU,YAAY,CAAC,KAAK,CAAC,KAAML,qBAAqB,GAAGF,oBAAoB,CAACO,YAAY,EAAEL,qBAAqB,CAAC,CAAC;MAC1H,IAAKK,YAAY,GAAClB,QAAQ,KAAM,CAAC,EAAE;QACjCa,qBAAqB,CAACK,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC;QAC3C;MACF;;MACA,IAAK,CAACA,YAAY,GAAC,CAAC,IAAElB,QAAQ,KAAM,CAAC,EAAE;QACrCa,qBAAqB,CAACK,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC;QAC3C;MACF;IACF;IACA;IACA,IAAIN,aAAa,GAACZ,QAAQ,KAAM,CAAC,EAAE;MACjCa,qBAAqB,CAACD,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC;MAC5C;IACF;IACA;IACA,IAAI,CAACA,aAAa,GAAC,CAAC,IAAEZ,QAAQ,KAAM,CAAC,EAAE;MACrCa,qBAAqB,CAACD,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC;MAC5C;IACF;;IACA,OAAOC,qBAAqB;EAChC,CAAC;EAED,MAAMM,WAAW,GAAIP,aAAqB,IAAK;IAC7C,MAAMC,qBAAqB,GAAG,CAAC,GAAGT,eAAe,CAAC;IAClD,IAAII,aAAa,CAACI,aAAa,CAAC,EAAE;MAChCC,qBAAqB,CAACD,aAAa,CAAC,GAAG,CAAC;MACxCP,kBAAkB,CAACQ,qBAAqB,CAAC;IAC3C,CAAC,MAAM;MACLR,kBAAkB,CAACM,oBAAoB,CAACC,aAAa,EAAEC,qBAAqB,CAAC,CAAC;;MAE9E;IACF;EACF,CAAC;;EAED,MAAMO,cAAc,GAAGA,CAAA,KAAM;IAC3B,OAAOZ,aAAa,CAACa,GAAG,CAAC,CAACC,SAAiB,EAAEC,KAAa,kBACxD1B,OAAA;MACE2B,SAAS,EAAG,YAAWpB,eAAe,CAACmB,KAAK,CAAC,KAAK,CAAC,IAAI,YAAa,IAAGnB,eAAe,CAACmB,KAAK,CAAC,KAAK,CAAC,IAAID,SAAS,KAAK,CAAC,CAAC,IAAI,MAAO,EAAE;MACpIG,OAAO,EAAEA,CAAA,KAAMN,WAAW,CAACI,KAAK,CAAE;MAAAG,QAAA,EAE/BtB,eAAe,CAACmB,KAAK,CAAC,GAAGD,SAAS,GAAG;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CACN,CAAC;EACJ,CAAC;EAGD,oBACEjC,OAAA;IAAK2B,SAAS,EAAC,WAAW;IAAAE,QAAA,EACvBN,cAAc,CAAC;EAAC;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEV;AAAC/B,EAAA,CAxFQD,QAAQ;AAAAiC,EAAA,GAARjC,QAAQ;AA0FjB,eAAeA,QAAQ;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}