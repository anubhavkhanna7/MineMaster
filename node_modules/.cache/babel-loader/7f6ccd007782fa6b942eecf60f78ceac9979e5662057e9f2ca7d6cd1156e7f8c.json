{"ast":null,"code":"var _jsxFileName = \"/Users/anubhavkhanna/Desktop/Code Repos/MineMaster/src/Components/MineGrid/MineGrid.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { LongPressEventType, useLongPress } from \"use-long-press\";\nimport calculateMatrix from '../../utils/gridGenerator';\nimport './MineGrid.css';\nimport { matchAllOpenedTiles, openSurroundingCells } from '../../utils/Utilities';\nimport Timer from './Timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MineGrid({\n  isDarkMode\n}) {\n  _s();\n  const mineSize = 9,\n    dificulty = 'EASY';\n  const [isBombClicked, setIsBombClicked] = useState(false);\n  const [allMinesIsolated, setAllMinesIsolated] = useState(false);\n  const [openedCellsList, setOpenedCellsList] = useState(new Array(mineSize * mineSize).fill(0));\n  const [generatedGrid, updateGeneratedGrid] = useState(new Array(mineSize * mineSize).fill(0));\n  const [isPaused, setPausedState] = useState(false);\n  useEffect(() => {\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n  }, []);\n  useEffect(() => {\n    matchAllOpenedTiles(openedCellsList, generatedGrid) && setAllMinesIsolated(true);\n  }, [openedCellsList]);\n  const bind = useLongPress(() => undefined, {\n    onFinish: (event, meta) => {\n      event.preventDefault();\n      !isBombClicked && onLongClickCell(meta.context || 0);\n    },\n    onCancel: (event, meta) => {\n      console.log(event);\n      !isBombClicked && onClickCell(meta.context || 0);\n    },\n    filterEvents: event => true,\n    threshold: 500,\n    captureEvent: true,\n    cancelOnMovement: false,\n    cancelOutsideElement: true,\n    detect: LongPressEventType.Pointer\n  });\n  const handlers = selectedIndex => bind(selectedIndex);\n  const onClickCell = selectedIndex => {\n    const updatedOpenedCellList = [...openedCellsList];\n    if (generatedGrid[selectedIndex] === -1) {\n      setIsBombClicked(true);\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList);\n    } else if (generatedGrid[selectedIndex] === 0) {\n      setOpenedCellsList(openSurroundingCells(selectedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n    } else if (updatedOpenedCellList[selectedIndex] === 1) {\n      let bombClicked = false;\n      if (selectedIndex < mineSize) {\n        if (selectedIndex === 0) {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n          }\n        } else if (selectedIndex === mineSize - 1) {\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n        } else {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n        }\n      } else if (selectedIndex >= mineSize * (mineSize - 1)) {\n        if (selectedIndex % mineSize === 0) {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n        } else if (selectedIndex % mineSize === mineSize - 1) {\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n        } else {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n        }\n      } else {\n        if (selectedIndex % mineSize === 0) {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n        } else if (selectedIndex % mineSize === mineSize - 1) {\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n        } else {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n        }\n      }\n      setOpenedCellsList(updatedOpenedCellList);\n      setIsBombClicked(bombClicked);\n    } else {\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList);\n    }\n  };\n  const onLongClickCell = selectedIndex => {\n    const updatedOpenedCellList = [...openedCellsList];\n    if (updatedOpenedCellList[selectedIndex] !== 1) {\n      updatedOpenedCellList[selectedIndex] = updatedOpenedCellList[selectedIndex] === -1 ? 0 : -1;\n      setOpenedCellsList(updatedOpenedCellList);\n    }\n  };\n  const flag = openStatus => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flag\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `base ${openStatus === 0 && 'base-red'}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n  const returnMineRows = () => {\n    return generatedGrid.map((gridValue, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mineTile  ${isDarkMode ? 'mineDark' : 'mineLight'} ${openedCellsList[index] === -1 && 'flaggedTile'} ${openedCellsList[index] === 1 && 'not-A-Mine'} ${openedCellsList[index] === 1 && gridValue === -1 && 'mine'}`,\n      ...handlers(index),\n      onClick: e => {\n        console.log(e.button);\n      },\n      style: isPaused ? unmountedStyle : mountedStyle,\n      children: openedCellsList[index] && openedCellsList[index] !== -1 && !isPaused || isBombClicked ? gridValue === -1 ? flag(openedCellsList[index]) : gridValue : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this));\n  };\n  const mountedStyle = {\n    animation: \"inAnimation 250ms ease-in\"\n  };\n  const unmountedStyle = {\n    animation: \"outAnimation 270ms ease-out\",\n    animationFillMode: \"forwards\"\n  };\n  const onResetClick = () => {\n    setOpenedCellsList(new Array(mineSize * mineSize).fill(0));\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n    setIsBombClicked(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mineGridContainer\",\n    children: [/*#__PURE__*/_jsxDEV(Timer, {\n      allMinesIsolated: allMinesIsolated,\n      isBombClicked: isBombClicked,\n      isDarkMode: isDarkMode,\n      isPaused: isPaused,\n      onResetClick: onResetClick,\n      setPausedState: setPausedState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mineContainer ${isDarkMode ? 'dark' : 'light'}`,\n      children: [returnMineRows(), isBombClicked && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: isDarkMode ? 'pausedScreenDark' : 'pausedScreen',\n        style: mountedStyle,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"gameOverText\",\n          children: \"GAME OVER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this), !isBombClicked && allMinesIsolated && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: isDarkMode ? 'pausedScreenDark' : 'pausedScreen',\n        style: mountedStyle,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"youWinText\",\n          children: \"YOU WIN!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this), isPaused && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: isDarkMode ? 'pausedScreenDark' : 'pausedScreen',\n        style: mountedStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pauseIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"PAUSED\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 5\n  }, this);\n}\n_s(MineGrid, \"QS2ctH15PDQ0l+lsOXKCLnXHoYU=\", false, function () {\n  return [useLongPress];\n});\n_c = MineGrid;\nexport default MineGrid;\nvar _c;\n$RefreshReg$(_c, \"MineGrid\");","map":{"version":3,"names":["useEffect","useState","LongPressEventType","useLongPress","calculateMatrix","matchAllOpenedTiles","openSurroundingCells","Timer","jsxDEV","_jsxDEV","MineGrid","isDarkMode","_s","mineSize","dificulty","isBombClicked","setIsBombClicked","allMinesIsolated","setAllMinesIsolated","openedCellsList","setOpenedCellsList","Array","fill","generatedGrid","updateGeneratedGrid","isPaused","setPausedState","bind","undefined","onFinish","event","meta","preventDefault","onLongClickCell","context","onCancel","console","log","onClickCell","filterEvents","threshold","captureEvent","cancelOnMovement","cancelOutsideElement","detect","Pointer","handlers","selectedIndex","updatedOpenedCellList","bombClicked","flag","openStatus","className","children","fileName","_jsxFileName","lineNumber","columnNumber","returnMineRows","map","gridValue","index","onClick","e","button","style","unmountedStyle","mountedStyle","animation","animationFillMode","onResetClick","_c","$RefreshReg$"],"sources":["/Users/anubhavkhanna/Desktop/Code Repos/MineMaster/src/Components/MineGrid/MineGrid.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { LongPressEventType, useLongPress } from \"use-long-press\";\nimport calculateMatrix from '../../utils/gridGenerator';\nimport './MineGrid.css'\nimport { matchAllOpenedTiles, openSurroundingCells } from '../../utils/Utilities';\nimport Timer from './Timer';\n\nfunction MineGrid({isDarkMode}: {isDarkMode: boolean}) {\n  const mineSize = 9, dificulty = 'EASY';\n  const [isBombClicked, setIsBombClicked] = useState(false);\n  const [allMinesIsolated, setAllMinesIsolated] = useState(false);\n  const [openedCellsList, setOpenedCellsList] = useState(new Array(mineSize*mineSize).fill(0));\n  const [generatedGrid, updateGeneratedGrid] = useState(new Array(mineSize*mineSize).fill(0));\n  const [isPaused, setPausedState] = useState(false);\n  \n  useEffect(() => {\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n  }, []);\n\n  useEffect(() => {\n    (matchAllOpenedTiles(openedCellsList, generatedGrid) && setAllMinesIsolated(true));\n  }, [openedCellsList]);\n\n  const bind = useLongPress(() => undefined, {\n    onFinish: (event, meta: {context ?:number|undefined}) => {\n      event.preventDefault();\n      !isBombClicked && onLongClickCell(meta.context || 0);\n    },\n    onCancel: (event, meta: {context ?:number|undefined}) => {\n      console.log(event);\n      !isBombClicked && onClickCell(meta.context || 0);\n    },\n    filterEvents: (event) => true,\n    threshold: 500,\n    captureEvent: true,\n    cancelOnMovement: false,\n    cancelOutsideElement: true,\n    detect: LongPressEventType.Pointer,\n  });\n  const handlers = (selectedIndex: number) => bind(selectedIndex);\n\n  const onClickCell = (selectedIndex: number) => {\n    const updatedOpenedCellList = [...openedCellsList];\n\n    if (generatedGrid[selectedIndex] === -1) {\n      setIsBombClicked(true);\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList)\n    } else if (generatedGrid[selectedIndex] === 0) {\n      setOpenedCellsList(openSurroundingCells(selectedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n    } else if (updatedOpenedCellList[selectedIndex] === 1) {\n      let bombClicked = false;\n      if (selectedIndex < mineSize) {\n        if (selectedIndex === 0) {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n          }\n        } else if (selectedIndex === mineSize-1) {\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n        } else {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n        }\n      } else if (selectedIndex >= (mineSize*(mineSize-1))) {\n        if (selectedIndex%mineSize === 0) {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n        } else if (selectedIndex%mineSize === mineSize-1) {\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n        } else {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n        }\n      } else {\n        if (selectedIndex%mineSize === 0) {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n        } else if (selectedIndex%mineSize === mineSize - 1) {\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n        } else {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n        }\n      }\n      setOpenedCellsList(updatedOpenedCellList);\n      setIsBombClicked(bombClicked);\n    } else {\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList);\n    }\n  }\n\n  const onLongClickCell = (selectedIndex: number) => {\n    const updatedOpenedCellList = [...openedCellsList];\n    if (updatedOpenedCellList[selectedIndex] !== 1) {\n      updatedOpenedCellList[selectedIndex] = updatedOpenedCellList[selectedIndex] === -1 ? 0 : -1;\n      setOpenedCellsList(updatedOpenedCellList);\n    }\n  }\n\n  const flag = (openStatus: number) => (\n    <div className='flag'>\n      <div className={`base ${openStatus === 0 && 'base-red'}`} />\n    </div>\n  );\n\n  const returnMineRows = () => {\n    return generatedGrid.map((gridValue: number, index: number) => (\n      <div\n        className={`mineTile  ${isDarkMode ? 'mineDark' : 'mineLight'} ${openedCellsList[index] === -1 && 'flaggedTile'} ${openedCellsList[index] === 1 && 'not-A-Mine'} ${openedCellsList[index] === 1 && gridValue === -1 && 'mine'}`}\n        {...handlers(index)}\n        onClick={(e) => {console.log(e.button)}}\n        style={isPaused ? unmountedStyle : mountedStyle}\n      >\n        {(openedCellsList[index] && openedCellsList[index] !== -1 && !isPaused) || isBombClicked ? (gridValue === -1 ? flag(openedCellsList[index]) : gridValue) : ''}\n      </div>\n    ))\n  }\n\n  const mountedStyle = {\n    animation: \"inAnimation 250ms ease-in\"\n  };\n  const unmountedStyle = {\n    animation: \"outAnimation 270ms ease-out\",\n    animationFillMode: \"forwards\"\n  };\n\n  const onResetClick = () => {\n    setOpenedCellsList(new Array(mineSize*mineSize).fill(0));\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n    setIsBombClicked(false);\n  }\n\n  return (\n    <div className='mineGridContainer'>\n      <Timer\n        allMinesIsolated={allMinesIsolated}\n        isBombClicked={isBombClicked}\n        isDarkMode={isDarkMode}\n        isPaused={isPaused}\n        onResetClick={onResetClick}\n        setPausedState={setPausedState}\n      />\n      <div className={`mineContainer ${isDarkMode ? 'dark' : 'light'}`}>\n        {returnMineRows()}\n\n        {isBombClicked && (\n          <div className={isDarkMode ? 'pausedScreenDark' : 'pausedScreen'} style={mountedStyle} >\n            <span className='gameOverText'>GAME OVER</span>\n          </div>\n        )}\n        {!isBombClicked && allMinesIsolated && (\n          <div className={isDarkMode ? 'pausedScreenDark' : 'pausedScreen'} style={mountedStyle} >\n            <span className='youWinText'>YOU WIN!</span>\n          </div>\n        )}\n        {isPaused && (\n          <div className={isDarkMode ? 'pausedScreenDark' : 'pausedScreen'} style={mountedStyle} >\n            <div className='pauseIcon' />\n            <span>PAUSED</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default MineGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}