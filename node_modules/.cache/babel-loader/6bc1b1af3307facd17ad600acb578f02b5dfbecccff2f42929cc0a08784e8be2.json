{"ast":null,"code":"export const fetchGameStats=()=>{const defaultStats={'NOVICE':{gamesPlayed:0,wins:0,losses:0,bestTime:'',averageTime:'',winPercentage:0},'EASY':{gamesPlayed:0,wins:0,losses:0,bestTime:'',averageTime:'',winPercentage:0},'MEDIUM':{gamesPlayed:0,wins:0,losses:0,bestTime:'',averageTime:'',winPercentage:0},'HARD':{gamesPlayed:0,wins:0,losses:0,bestTime:'',averageTime:'',winPercentage:0},'EXTREME':{gamesPlayed:0,wins:0,losses:0,bestTime:'',averageTime:'',winPercentage:0},'INSANE':{gamesPlayed:0,wins:0,losses:0,bestTime:'',averageTime:'',winPercentage:0}};let stats;if(localStorage.getItem('mineMasterStats')){// @ts-ignore\nstats=JSON.parse(localStorage.getItem('mineMasterStats'));}else{localStorage.setItem('mineMasterStats',JSON.stringify(defaultStats));stats=defaultStats;}return stats;};export const findGameStatsForDificulty=dificultyLevel=>{const stats=fetchGameStats();return stats[dificultyLevel];};export const updateGameStats=(dificultyLevel,currentGameStats)=>{const stats=fetchGameStats();const currentStats=stats[dificultyLevel];currentStats.gamesPlayed++;currentGameStats.gameWon?currentStats.wins++:currentStats.losses++;currentStats.winPercentage=currentStats.wins/currentStats.gamesPlayed*100;currentStats.bestTime=currentGameStats.gameWon?findSmallerTime(currentStats.bestTime,currentGameStats.gameTime):currentStats.bestTime;currentStats.averageTime=currentGameStats.gameWon?calculateAvgTime(currentStats.gamesPlayed,currentStats.averageTime,currentGameStats.gameTime):currentStats.averageTime;stats[dificultyLevel]=currentStats;localStorage.setItem('mineMasterStats',JSON.stringify(stats));return stats[dificultyLevel];};const findSmallerTime=(time1,time2)=>{if(time1==='')return time2;return calculateSecondCount(time1)>calculateSecondCount(time2)?time2:time1;};const calculateAvgTime=(gamesPlayed,averageTime,newTime)=>{if(averageTime==='')return newTime;const avgSeconds=calculateSecondCount(averageTime);const newSeconds=calculateSecondCount(newTime);const newAverageSeconds=gamesPlayed===1?(avgSeconds*gamesPlayed+newSeconds)/gamesPlayed:(avgSeconds*(gamesPlayed-1)+newSeconds)/gamesPlayed;const seconds=Math.abs(newAverageSeconds%60);const minutes=Math.floor(newAverageSeconds/60)%60;const hours=Math.floor(newAverageSeconds/60)<60?0:Math.floor(Math.floor(newAverageSeconds/60)/60);return\"\".concat(hours<=9?\"0\".concat(hours):hours,\" : \").concat(minutes<=9?\"0\".concat(minutes):minutes,\" : \").concat(seconds<=9?\"0\".concat(seconds):seconds);};const calculateSecondCount=time=>{const splitTime=time.split(' : ');console.log(time,splitTime);return parseInt(splitTime[0])*3600+parseInt(splitTime[1])*60+parseInt(splitTime[2]);};","map":{"version":3,"names":["fetchGameStats","defaultStats","gamesPlayed","wins","losses","bestTime","averageTime","winPercentage","stats","localStorage","getItem","JSON","parse","setItem","stringify","findGameStatsForDificulty","dificultyLevel","updateGameStats","currentGameStats","currentStats","gameWon","findSmallerTime","gameTime","calculateAvgTime","time1","time2","calculateSecondCount","newTime","avgSeconds","newSeconds","newAverageSeconds","seconds","Math","abs","minutes","floor","hours","concat","time","splitTime","split","console","log","parseInt"],"sources":["/Users/anubhavkhanna/Desktop/Code Repos/MineMaster/src/utils/localStorage.ts"],"sourcesContent":["interface gameStatus {\n  gameTime: string\n  gameWon: boolean\n}\n\nexport const fetchGameStats = () => {\n  const defaultStats = {\n    'NOVICE': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'EASY': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'MEDIUM': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'HARD': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'EXTREME': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'INSANE': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    }\n  }\n\n  let stats;\n  if (localStorage.getItem('mineMasterStats')) {\n    // @ts-ignore\n    stats = JSON.parse(localStorage.getItem('mineMasterStats'))\n  } else {\n    localStorage.setItem('mineMasterStats', JSON.stringify(defaultStats))\n    stats = defaultStats;\n  }\n  return stats;\n}\n\nexport const findGameStatsForDificulty = (dificultyLevel: string) => {\n  const stats = fetchGameStats();\n  return stats[dificultyLevel];\n}\n\nexport const updateGameStats = (dificultyLevel: string, currentGameStats: gameStatus) => {\n  const stats = fetchGameStats();\n  const currentStats = stats[dificultyLevel];\n  currentStats.gamesPlayed++;\n  currentGameStats.gameWon ? currentStats.wins ++ : currentStats.losses++;\n  currentStats.winPercentage = (currentStats.wins/currentStats.gamesPlayed) * 100;\n  currentStats.bestTime = currentGameStats.gameWon ? findSmallerTime(currentStats.bestTime, currentGameStats.gameTime) : currentStats.bestTime;\n  currentStats.averageTime = currentGameStats.gameWon ? calculateAvgTime(currentStats.gamesPlayed, currentStats.averageTime, currentGameStats.gameTime) : currentStats.averageTime;\n\n  stats[dificultyLevel] = currentStats;\n  localStorage.setItem('mineMasterStats', JSON.stringify(stats))\n  return stats[dificultyLevel];\n}\n\nconst findSmallerTime = (time1: string, time2: string) => {\n  if (time1 === '') return time2;\n  return calculateSecondCount(time1) > calculateSecondCount(time2) ? time2 : time1;\n}\n\nconst calculateAvgTime = (gamesPlayed: number, averageTime: string, newTime: string) => {\n  if (averageTime === '') return newTime;\n  const avgSeconds = calculateSecondCount(averageTime);\n  const newSeconds = calculateSecondCount(newTime);\n  const newAverageSeconds = gamesPlayed === 1 ? ((avgSeconds * (gamesPlayed)) + newSeconds)/gamesPlayed : ((avgSeconds * (gamesPlayed -1)) + newSeconds)/gamesPlayed;\n\n  const seconds = Math.abs(newAverageSeconds%60);\n  const minutes = (Math.floor(newAverageSeconds/60))%60;\n  const hours = Math.floor(newAverageSeconds/60) < 60 ? 0 : Math.floor(Math.floor(newAverageSeconds/60)/60);\n  return `${hours <= 9 ? `0${hours}` : hours} : ${minutes <= 9 ? `0${minutes}` : minutes} : ${seconds <= 9 ? `0${seconds}` : seconds}`;\n}\n\nconst calculateSecondCount = (time: string) => {\n  const splitTime = time.split(' : ')\n  console.log(time, splitTime)\n  return parseInt(splitTime[0]) * 3600 + parseInt(splitTime[1]) * 60 + parseInt(splitTime[2])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}