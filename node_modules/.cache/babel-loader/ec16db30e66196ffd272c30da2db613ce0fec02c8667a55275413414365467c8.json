{"ast":null,"code":"var _jsxFileName = \"/Users/anubhavkhanna/Desktop/Code Repos/minemaster/src/Components/MineGrid.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { LongPressEventType, useLongPress } from \"use-long-press\";\nimport calculateMatrix from '../utils/gridGenerator';\nimport './MineGrid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MineGrid() {\n  _s();\n  const mineSize = 9,\n    dificulty = 'EASY';\n  const [isBombClicked, setIsBombClicked] = useState(false);\n  const [allMinesIsolated, setAllMinesIsolated] = useState(false);\n  const [openedCellsList, setOpenedCellsList] = useState(new Array(mineSize * mineSize).fill(0));\n  const [generatedGrid, updateGeneratedGrid] = useState(new Array(mineSize * mineSize));\n  useEffect(() => {}, [openedCellsList]);\n  useEffect(() => {\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n  }, []);\n  const bind = useLongPress(() => undefined, {\n    onFinish: (event, meta) => {\n      onLongClickCell(meta.context || 0);\n    },\n    onCancel: (event, meta) => {\n      onClickCell(meta.context || 0);\n    },\n    filterEvents: event => true,\n    threshold: 500,\n    captureEvent: true,\n    cancelOnMovement: false,\n    cancelOutsideElement: true,\n    detect: LongPressEventType.Pointer\n  });\n  const handlers = selectedIndex => bind(selectedIndex);\n\n  // const openUpperRowTiles = (selectedIndex: number, updatedOpenedCellList: any) => {\n  //   const updatedIndex = selectedIndex-mineSize;\n  //   if(!updatedOpenedCellList[updatedIndex]) {\n  //     updatedOpenedCellList[updatedIndex] = 1;\n  //     (generatedGrid[updatedIndex] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex, updatedOpenedCellList));\n  //   }\n  //   if ((updatedIndex%mineSize) !== 0 && !updatedOpenedCellList[updatedIndex - 1]) {\n  //     updatedOpenedCellList[updatedIndex - 1] = 1;\n  //     (generatedGrid[updatedIndex - 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex - 1, updatedOpenedCellList));\n  //   }\n  //   if (((updatedIndex+1)%mineSize) !== 0 && !updatedOpenedCellList[updatedIndex + 1]) {\n  //     updatedOpenedCellList[updatedIndex + 1] = 1;\n  //     (generatedGrid[updatedIndex + 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex + 1, updatedOpenedCellList));\n  //   }\n  //   return updatedOpenedCellList;\n  // }\n\n  // const openLowerRowTiles = (selectedIndex: number, updatedOpenedCellList: any) => {\n  //   const updatedIndex = selectedIndex+mineSize;\n  //   if(!updatedOpenedCellList[updatedIndex]) {\n  //     updatedOpenedCellList[updatedIndex] = 1;\n  //     (generatedGrid[updatedIndex] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex, updatedOpenedCellList));\n  //   }\n  //   if ((updatedIndex%mineSize) !== 0 && !updatedOpenedCellList[updatedIndex - 1]) {\n  //     updatedOpenedCellList[updatedIndex - 1] = 1;\n  //     (generatedGrid[updatedIndex - 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex - 1, updatedOpenedCellList));\n  //   }\n  //   if(((updatedIndex+1)%mineSize) !== 0 && !updatedOpenedCellList[updatedIndex + 1]) {\n  //     updatedOpenedCellList[updatedIndex + 1] = 1;\n  //     (generatedGrid[updatedIndex + 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex + 1, updatedOpenedCellList));\n  //   }\n  //   return updatedOpenedCellList;\n  // }\n\n  // const openSurroundingCells = (selectedIndex: number, updatedOpenedCellList: any) => {\n  //   updatedOpenedCellList[selectedIndex] = 1;\n  //     const isFirstRow = selectedIndex < (mineSize);\n  //     const isLastRow = selectedIndex >= (mineSize*(mineSize-1));\n\n  //     // Open tiles below the selected tile\n  //     !isLastRow && (updatedOpenedCellList = openLowerRowTiles(selectedIndex, updatedOpenedCellList));\n\n  //     // Open tiles above the selected tile\n  //     !isFirstRow && (updatedOpenedCellList = openUpperRowTiles(selectedIndex, updatedOpenedCellList));\n\n  //     if((selectedIndex%mineSize) !== 0 && !updatedOpenedCellList[selectedIndex - 1]) {\n  //       // Open tiles to the left of selected tile\n  //       updatedOpenedCellList[selectedIndex - 1] = 1;\n  //       (generatedGrid[selectedIndex - 1] === 0) && (updatedOpenedCellList = openSurroundingCells(selectedIndex - 1, updatedOpenedCellList));\n  //     }\n  //     if(((selectedIndex+1)%mineSize) !== 0 && !updatedOpenedCellList[selectedIndex + 1] ) {\n  //       // Open tiles to the right of selected tile\n  //       updatedOpenedCellList[selectedIndex + 1] = 1;\n  //       (generatedGrid[selectedIndex + 1] === 0) && (updatedOpenedCellList = openSurroundingCells(selectedIndex + 1, updatedOpenedCellList));\n  //     }\n  //     return updatedOpenedCellList;\n  // }\n\n  const onClickCell = selectedIndex => {\n    const updatedOpenedCellList = [...openedCellsList];\n    if (generatedGrid[selectedIndex]) {\n      generatedGrid[selectedIndex] === -1 && setIsBombClicked(true);\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList);\n    } else {\n      setOpenedCellsList(openSurroundingCells(selectedIndex, updatedOpenedCellList));\n    }\n  };\n  const onLongClickCell = selectedIndex => {\n    const updatedOpenedCellList = [...openedCellsList];\n    updatedOpenedCellList[selectedIndex] = updatedOpenedCellList[selectedIndex] === -1 ? 0 : -1;\n    setOpenedCellsList(updatedOpenedCellList);\n  };\n  const returnMineRows = () => {\n    return generatedGrid.map((gridValue, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mineTile ${openedCellsList[index] === -1 && 'flaggedTile'} ${openedCellsList[index] === 1 && 'not-A-Mine'} ${openedCellsList[index] === 1 && gridValue === -1 && 'mine'}`,\n      ...handlers(index),\n      children: openedCellsList[index] && openedCellsList[index] !== -1 ? gridValue : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: returnMineRows()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(MineGrid, \"jKBodjLkitdeW5eSqa7onFJu06c=\", false, function () {\n  return [useLongPress];\n});\n_c = MineGrid;\nexport default MineGrid;\nvar _c;\n$RefreshReg$(_c, \"MineGrid\");","map":{"version":3,"names":["useEffect","useState","LongPressEventType","useLongPress","calculateMatrix","jsxDEV","_jsxDEV","MineGrid","_s","mineSize","dificulty","isBombClicked","setIsBombClicked","allMinesIsolated","setAllMinesIsolated","openedCellsList","setOpenedCellsList","Array","fill","generatedGrid","updateGeneratedGrid","bind","undefined","onFinish","event","meta","onLongClickCell","context","onCancel","onClickCell","filterEvents","threshold","captureEvent","cancelOnMovement","cancelOutsideElement","detect","Pointer","handlers","selectedIndex","updatedOpenedCellList","openSurroundingCells","returnMineRows","map","gridValue","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/anubhavkhanna/Desktop/Code Repos/minemaster/src/Components/MineGrid.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { LongPressEventType, useLongPress } from \"use-long-press\";\nimport calculateMatrix from '../utils/gridGenerator';\nimport './MineGrid.css'\n\nfunction MineGrid() {\n  const mineSize = 9, dificulty = 'EASY';\n  const [isBombClicked, setIsBombClicked] = useState(false);\n  const [allMinesIsolated, setAllMinesIsolated] = useState(false);\n  const [openedCellsList, setOpenedCellsList] = useState(new Array(mineSize*mineSize).fill(0));\n  const [generatedGrid, updateGeneratedGrid] = useState(new Array(mineSize*mineSize));\n\n  useEffect(() => {\n\n  }, [openedCellsList]);\n\n  useEffect(() => {\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n  }, []);\n\n  const bind = useLongPress(() => undefined, {\n    onFinish: (event, meta: {context ?:number|undefined}) => {\n      onLongClickCell(meta.context || 0);\n    },\n    onCancel: (event, meta: {context ?:number|undefined}) => {\n      onClickCell(meta.context || 0);\n    },\n    filterEvents: (event) => true,\n    threshold: 500,\n    captureEvent: true,\n    cancelOnMovement: false,\n    cancelOutsideElement: true,\n    detect: LongPressEventType.Pointer,\n  });\n  const handlers = (selectedIndex: number) => bind(selectedIndex);\n\n  // const openUpperRowTiles = (selectedIndex: number, updatedOpenedCellList: any) => {\n  //   const updatedIndex = selectedIndex-mineSize;\n  //   if(!updatedOpenedCellList[updatedIndex]) {\n  //     updatedOpenedCellList[updatedIndex] = 1;\n  //     (generatedGrid[updatedIndex] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex, updatedOpenedCellList));\n  //   }\n  //   if ((updatedIndex%mineSize) !== 0 && !updatedOpenedCellList[updatedIndex - 1]) {\n  //     updatedOpenedCellList[updatedIndex - 1] = 1;\n  //     (generatedGrid[updatedIndex - 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex - 1, updatedOpenedCellList));\n  //   }\n  //   if (((updatedIndex+1)%mineSize) !== 0 && !updatedOpenedCellList[updatedIndex + 1]) {\n  //     updatedOpenedCellList[updatedIndex + 1] = 1;\n  //     (generatedGrid[updatedIndex + 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex + 1, updatedOpenedCellList));\n  //   }\n  //   return updatedOpenedCellList;\n  // }\n\n  // const openLowerRowTiles = (selectedIndex: number, updatedOpenedCellList: any) => {\n  //   const updatedIndex = selectedIndex+mineSize;\n  //   if(!updatedOpenedCellList[updatedIndex]) {\n  //     updatedOpenedCellList[updatedIndex] = 1;\n  //     (generatedGrid[updatedIndex] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex, updatedOpenedCellList));\n  //   }\n  //   if ((updatedIndex%mineSize) !== 0 && !updatedOpenedCellList[updatedIndex - 1]) {\n  //     updatedOpenedCellList[updatedIndex - 1] = 1;\n  //     (generatedGrid[updatedIndex - 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex - 1, updatedOpenedCellList));\n  //   }\n  //   if(((updatedIndex+1)%mineSize) !== 0 && !updatedOpenedCellList[updatedIndex + 1]) {\n  //     updatedOpenedCellList[updatedIndex + 1] = 1;\n  //     (generatedGrid[updatedIndex + 1] === 0) && (updatedOpenedCellList = openSurroundingCells(updatedIndex + 1, updatedOpenedCellList));\n  //   }\n  //   return updatedOpenedCellList;\n  // }\n\n  // const openSurroundingCells = (selectedIndex: number, updatedOpenedCellList: any) => {\n  //   updatedOpenedCellList[selectedIndex] = 1;\n  //     const isFirstRow = selectedIndex < (mineSize);\n  //     const isLastRow = selectedIndex >= (mineSize*(mineSize-1));\n\n  //     // Open tiles below the selected tile\n  //     !isLastRow && (updatedOpenedCellList = openLowerRowTiles(selectedIndex, updatedOpenedCellList));\n\n  //     // Open tiles above the selected tile\n  //     !isFirstRow && (updatedOpenedCellList = openUpperRowTiles(selectedIndex, updatedOpenedCellList));\n\n  //     if((selectedIndex%mineSize) !== 0 && !updatedOpenedCellList[selectedIndex - 1]) {\n  //       // Open tiles to the left of selected tile\n  //       updatedOpenedCellList[selectedIndex - 1] = 1;\n  //       (generatedGrid[selectedIndex - 1] === 0) && (updatedOpenedCellList = openSurroundingCells(selectedIndex - 1, updatedOpenedCellList));\n  //     }\n  //     if(((selectedIndex+1)%mineSize) !== 0 && !updatedOpenedCellList[selectedIndex + 1] ) {\n  //       // Open tiles to the right of selected tile\n  //       updatedOpenedCellList[selectedIndex + 1] = 1;\n  //       (generatedGrid[selectedIndex + 1] === 0) && (updatedOpenedCellList = openSurroundingCells(selectedIndex + 1, updatedOpenedCellList));\n  //     }\n  //     return updatedOpenedCellList;\n  // }\n\n  const onClickCell = (selectedIndex: number) => {\n    const updatedOpenedCellList = [...openedCellsList];\n\n    if (generatedGrid[selectedIndex]) {\n      generatedGrid[selectedIndex] === -1 && setIsBombClicked(true);\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList)\n    } else {\n      setOpenedCellsList(openSurroundingCells(selectedIndex, updatedOpenedCellList));\n    }\n  }\n\n  const onLongClickCell = (selectedIndex: number) => {\n    const updatedOpenedCellList = [...openedCellsList];\n    updatedOpenedCellList[selectedIndex] = updatedOpenedCellList[selectedIndex] === -1 ? 0 : -1;\n    setOpenedCellsList(updatedOpenedCellList);\n  }\n\n  const returnMineRows = () => {\n    return generatedGrid.map((gridValue: number, index: number) => (\n      <div\n        className={`mineTile ${openedCellsList[index] === -1 && 'flaggedTile'} ${openedCellsList[index] === 1 && 'not-A-Mine'} ${openedCellsList[index] === 1 && gridValue === -1 && 'mine'}`}\n        {...handlers(index)}\n      >\n        {openedCellsList[index] && openedCellsList[index] !== -1 ? gridValue : ''}\n      </div>\n    ))\n  }\n\n\n  return (\n    <div className='container'>\n      {returnMineRows()}\n    </div>\n  );\n}\n\nexport default MineGrid;"],"mappings":";;AAAA,SAAsBA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,SAASC,kBAAkB,EAAEC,YAAY,QAAQ,gBAAgB;AACjE,OAAOC,eAAe,MAAM,wBAAwB;AACpD,OAAO,gBAAgB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvB,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAG,CAAC;IAAEC,SAAS,GAAG,MAAM;EACtC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,IAAIgB,KAAK,CAACR,QAAQ,GAACA,QAAQ,CAAC,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5F,MAAM,CAACC,aAAa,EAAEC,mBAAmB,CAAC,GAAGnB,QAAQ,CAAC,IAAIgB,KAAK,CAACR,QAAQ,GAACA,QAAQ,CAAC,CAAC;EAEnFT,SAAS,CAAC,MAAM,CAEhB,CAAC,EAAE,CAACe,eAAe,CAAC,CAAC;EAErBf,SAAS,CAAC,MAAM;IACdoB,mBAAmB,CAAChB,eAAe,CAACK,QAAQ,EAAEC,SAAS,CAAC,CAAC;EAC3D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,IAAI,GAAGlB,YAAY,CAAC,MAAMmB,SAAS,EAAE;IACzCC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,IAAkC,KAAK;MACvDC,eAAe,CAACD,IAAI,CAACE,OAAO,IAAI,CAAC,CAAC;IACpC,CAAC;IACDC,QAAQ,EAAEA,CAACJ,KAAK,EAAEC,IAAkC,KAAK;MACvDI,WAAW,CAACJ,IAAI,CAACE,OAAO,IAAI,CAAC,CAAC;IAChC,CAAC;IACDG,YAAY,EAAGN,KAAK,IAAK,IAAI;IAC7BO,SAAS,EAAE,GAAG;IACdC,YAAY,EAAE,IAAI;IAClBC,gBAAgB,EAAE,KAAK;IACvBC,oBAAoB,EAAE,IAAI;IAC1BC,MAAM,EAAEjC,kBAAkB,CAACkC;EAC7B,CAAC,CAAC;EACF,MAAMC,QAAQ,GAAIC,aAAqB,IAAKjB,IAAI,CAACiB,aAAa,CAAC;;EAE/D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMT,WAAW,GAAIS,aAAqB,IAAK;IAC7C,MAAMC,qBAAqB,GAAG,CAAC,GAAGxB,eAAe,CAAC;IAElD,IAAII,aAAa,CAACmB,aAAa,CAAC,EAAE;MAChCnB,aAAa,CAACmB,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI1B,gBAAgB,CAAC,IAAI,CAAC;MAC7D2B,qBAAqB,CAACD,aAAa,CAAC,GAAG,CAAC;MACxCtB,kBAAkB,CAACuB,qBAAqB,CAAC;IAC3C,CAAC,MAAM;MACLvB,kBAAkB,CAACwB,oBAAoB,CAACF,aAAa,EAAEC,qBAAqB,CAAC,CAAC;IAChF;EACF,CAAC;EAED,MAAMb,eAAe,GAAIY,aAAqB,IAAK;IACjD,MAAMC,qBAAqB,GAAG,CAAC,GAAGxB,eAAe,CAAC;IAClDwB,qBAAqB,CAACD,aAAa,CAAC,GAAGC,qBAAqB,CAACD,aAAa,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3FtB,kBAAkB,CAACuB,qBAAqB,CAAC;EAC3C,CAAC;EAED,MAAME,cAAc,GAAGA,CAAA,KAAM;IAC3B,OAAOtB,aAAa,CAACuB,GAAG,CAAC,CAACC,SAAiB,EAAEC,KAAa,kBACxDtC,OAAA;MACEuC,SAAS,EAAG,YAAW9B,eAAe,CAAC6B,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,aAAc,IAAG7B,eAAe,CAAC6B,KAAK,CAAC,KAAK,CAAC,IAAI,YAAa,IAAG7B,eAAe,CAAC6B,KAAK,CAAC,KAAK,CAAC,IAAID,SAAS,KAAK,CAAC,CAAC,IAAI,MAAO,EAAE;MAAA,GAClLN,QAAQ,CAACO,KAAK,CAAC;MAAAE,QAAA,EAElB/B,eAAe,CAAC6B,KAAK,CAAC,IAAI7B,eAAe,CAAC6B,KAAK,CAAC,KAAK,CAAC,CAAC,GAAGD,SAAS,GAAG;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CACN,CAAC;EACJ,CAAC;EAGD,oBACE5C,OAAA;IAAKuC,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvBL,cAAc,CAAC;EAAC;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEV;AAAC1C,EAAA,CA5HQD,QAAQ;EAAA,QAeFJ,YAAY;AAAA;AAAAgD,EAAA,GAflB5C,QAAQ;AA8HjB,eAAeA,QAAQ;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}