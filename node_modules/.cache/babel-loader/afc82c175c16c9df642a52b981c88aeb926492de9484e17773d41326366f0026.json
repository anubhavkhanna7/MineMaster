{"ast":null,"code":"var _jsxFileName = \"/Users/anubhavkhanna/Desktop/Code Repos/MineMaster/src/Components/MineGrid/MineGrid.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { LongPressEventType, useLongPress } from \"use-long-press\";\nimport calculateMatrix from '../../utils/gridGenerator';\nimport './MineGrid.css';\nimport { matchAllOpenedTiles, openSurroundingCells } from '../../utils/Utilities';\nimport Timer from './Timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nfunction MineGrid({\n  isDarkMode\n}) {\n  _s();\n  const mineSize = 9,\n    dificulty = 'EASY';\n  const [isBombClicked, setIsBombClicked] = useState(false);\n  const [allMinesIsolated, setAllMinesIsolated] = useState(false);\n  const [openedCellsList, setOpenedCellsList] = useState(new Array(mineSize * mineSize).fill(0));\n  const [generatedGrid, updateGeneratedGrid] = useState(new Array(mineSize * mineSize).fill(0));\n  const [isPaused, setPausedState] = useState(false);\n  useEffect(() => {\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n  }, []);\n  useEffect(() => {\n    matchAllOpenedTiles(openedCellsList, generatedGrid) && setAllMinesIsolated(true);\n  }, [openedCellsList]);\n  const blinkerTile = tileList => {\n    var _document$getElementB;\n    tileList.forEach();\n    (_document$getElementB = document.getElementById(`mine-1`)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.classList.add('blinker');\n  };\n  const bind = useLongPress(() => undefined, {\n    onFinish: (event, meta) => {\n      event.preventDefault();\n      !isBombClicked && onLongClickCell(meta.context || 0);\n    },\n    onCancel: (event, meta) => {\n      // @ts-ignore\n      !isBombClicked && event.button !== 2 && onClickCell(meta.context || 0);\n    },\n    filterEvents: event => true,\n    threshold: 500,\n    captureEvent: true,\n    cancelOnMovement: false,\n    cancelOutsideElement: true,\n    detect: LongPressEventType.Pointer\n  });\n  const handlers = selectedIndex => bind(selectedIndex);\n  const onClickCell = selectedIndex => {\n    let updatedOpenedCellList = [...openedCellsList];\n    if (generatedGrid[selectedIndex] === -1) {\n      setIsBombClicked(true);\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList);\n    } else if (generatedGrid[selectedIndex] === 0) {\n      setOpenedCellsList(openSurroundingCells(selectedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n    } else if (updatedOpenedCellList[selectedIndex] === 1) {\n      let bombClicked = false;\n      if (selectedIndex < mineSize) {\n        if (selectedIndex === 0) {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1 && updatedOpenedCellList[selectedIndex + mineSize] !== -1 && updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            blinkerTile([selectedIndex + 1, selectedIndex + mineSize, selectedIndex + mineSize + 1]);\n          } else {\n            if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize + 1] === 0 ? openSurroundingCells(selectedIndex + mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n            }\n          }\n        } else if (selectedIndex === mineSize - 1) {\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize - 1] === 0 ? openSurroundingCells(selectedIndex + mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n        } else {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize + 1] === 0 ? openSurroundingCells(selectedIndex + mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize - 1] === 0 ? openSurroundingCells(selectedIndex + mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n        }\n      } else if (selectedIndex >= mineSize * (mineSize - 1)) {\n        if (selectedIndex % mineSize === 0) {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize + 1] === 0 ? openSurroundingCells(selectedIndex - mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n        } else if (selectedIndex % mineSize === mineSize - 1) {\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize - 1] === 0 ? openSurroundingCells(selectedIndex - mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n        } else {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize + 1] === 0 ? openSurroundingCells(selectedIndex - mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize - 1] === 0 ? openSurroundingCells(selectedIndex - mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n        }\n      } else {\n        if (selectedIndex % mineSize === 0) {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize + 1] === 0 ? openSurroundingCells(selectedIndex + mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize + 1] === 0 ? openSurroundingCells(selectedIndex - mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n        } else if (selectedIndex % mineSize === mineSize - 1) {\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize - 1] === 0 ? openSurroundingCells(selectedIndex + mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize - 1] === 0 ? openSurroundingCells(selectedIndex - mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n        } else {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize - 1] === 0 ? openSurroundingCells(selectedIndex + mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize + 1] === 0 ? openSurroundingCells(selectedIndex + mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize - 1] === 0 ? openSurroundingCells(selectedIndex - mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize + 1] === 0 ? openSurroundingCells(selectedIndex - mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n        }\n      }\n      setOpenedCellsList(updatedOpenedCellList);\n      setIsBombClicked(bombClicked);\n    } else {\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList);\n    }\n  };\n  const onLongClickCell = selectedIndex => {\n    const updatedOpenedCellList = [...openedCellsList];\n    if (updatedOpenedCellList[selectedIndex] !== 1) {\n      updatedOpenedCellList[selectedIndex] = updatedOpenedCellList[selectedIndex] === -1 ? 0 : -1;\n      setOpenedCellsList(updatedOpenedCellList);\n    }\n  };\n  const flag = openStatus => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flag\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `base ${openStatus === 0 && 'base-red'}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 295,\n    columnNumber: 5\n  }, this);\n  const returnMineRows = () => {\n    return generatedGrid.map((gridValue, index) => /*#__PURE__*/_createElement(\"div\", {\n      className: `mineTile  ${isDarkMode ? 'mineDark' : 'mineLight'} ${openedCellsList[index] === -1 && 'flaggedTile'} ${openedCellsList[index] === 1 && 'not-A-Mine'} ${openedCellsList[index] === 1 && gridValue === -1 && 'mine'}`,\n      ...handlers(index),\n      onContextMenu: e => {\n        e.preventDefault();\n        !isBombClicked && onLongClickCell(index);\n      },\n      style: isPaused ? unmountedStyle : mountedStyle,\n      key: `mine-${index}`,\n      id: `mine-${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 7\n      }\n    }, openedCellsList[index] && openedCellsList[index] !== -1 && !isPaused || isBombClicked ? gridValue === -1 ? flag(openedCellsList[index]) : gridValue : ''));\n  };\n  const mountedStyle = {\n    animation: \"inAnimation 250ms ease-in\"\n  };\n  const unmountedStyle = {\n    animation: \"outAnimation 270ms ease-out\",\n    animationFillMode: \"forwards\"\n  };\n  const onResetClick = () => {\n    setOpenedCellsList(new Array(mineSize * mineSize).fill(0));\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n    setIsBombClicked(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mineGridContainer\",\n    children: [/*#__PURE__*/_jsxDEV(Timer, {\n      allMinesIsolated: allMinesIsolated,\n      isBombClicked: isBombClicked,\n      isDarkMode: isDarkMode,\n      isPaused: isPaused,\n      onResetClick: onResetClick,\n      setPausedState: setPausedState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mineContainer ${isDarkMode ? 'dark' : 'light'}`,\n      children: [returnMineRows(), isBombClicked && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: isDarkMode ? 'pausedScreenDark' : 'pausedScreen',\n        style: mountedStyle,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"gameOverText\",\n          children: \"GAME OVER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this), !isBombClicked && allMinesIsolated && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: isDarkMode ? 'pausedScreenDark' : 'pausedScreen',\n        style: mountedStyle,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"youWinText\",\n          children: \"YOU WIN!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 11\n      }, this), isPaused && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: isDarkMode ? 'pausedScreenDark' : 'pausedScreen',\n        style: mountedStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pauseIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"PAUSED\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 5\n  }, this);\n}\n_s(MineGrid, \"QS2ctH15PDQ0l+lsOXKCLnXHoYU=\", false, function () {\n  return [useLongPress];\n});\n_c = MineGrid;\nexport default MineGrid;\nvar _c;\n$RefreshReg$(_c, \"MineGrid\");","map":{"version":3,"names":["useEffect","useState","LongPressEventType","useLongPress","calculateMatrix","matchAllOpenedTiles","openSurroundingCells","Timer","jsxDEV","_jsxDEV","createElement","_createElement","MineGrid","isDarkMode","_s","mineSize","dificulty","isBombClicked","setIsBombClicked","allMinesIsolated","setAllMinesIsolated","openedCellsList","setOpenedCellsList","Array","fill","generatedGrid","updateGeneratedGrid","isPaused","setPausedState","blinkerTile","tileList","_document$getElementB","forEach","document","getElementById","classList","add","bind","undefined","onFinish","event","meta","preventDefault","onLongClickCell","context","onCancel","button","onClickCell","filterEvents","threshold","captureEvent","cancelOnMovement","cancelOutsideElement","detect","Pointer","handlers","selectedIndex","updatedOpenedCellList","bombClicked","flag","openStatus","className","children","fileName","_jsxFileName","lineNumber","columnNumber","returnMineRows","map","gridValue","index","onContextMenu","e","style","unmountedStyle","mountedStyle","key","id","__self","__source","animation","animationFillMode","onResetClick","_c","$RefreshReg$"],"sources":["/Users/anubhavkhanna/Desktop/Code Repos/MineMaster/src/Components/MineGrid/MineGrid.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { LongPressEventType, useLongPress } from \"use-long-press\";\nimport calculateMatrix from '../../utils/gridGenerator';\nimport './MineGrid.css'\nimport { matchAllOpenedTiles, openSurroundingCells } from '../../utils/Utilities';\nimport Timer from './Timer';\n\nfunction MineGrid({isDarkMode}: {isDarkMode: boolean}) {\n  const mineSize = 9, dificulty = 'EASY';\n  const [isBombClicked, setIsBombClicked] = useState(false);\n  const [allMinesIsolated, setAllMinesIsolated] = useState(false);\n  const [openedCellsList, setOpenedCellsList] = useState(new Array(mineSize*mineSize).fill(0));\n  const [generatedGrid, updateGeneratedGrid] = useState(new Array(mineSize*mineSize).fill(0));\n  const [isPaused, setPausedState] = useState(false);\n  \n  useEffect(() => {\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n  }, []);\n\n  useEffect(() => {\n    (matchAllOpenedTiles(openedCellsList, generatedGrid) && setAllMinesIsolated(true));\n  }, [openedCellsList]);\n\n  const blinkerTile = (tileList: Array<Number>) => {\n    tileList.forEach()\n    document.getElementById(`mine-1`)?.classList.add('blinker')\n  }\n\n  const bind = useLongPress(() => undefined, {\n    onFinish: (event, meta: {context ?:number|undefined}) => {\n      event.preventDefault();\n      !isBombClicked && onLongClickCell(meta.context || 0);\n    },\n    onCancel: (event, meta: {context ?:number|undefined}) => {\n      // @ts-ignore\n      !isBombClicked && event.button !==2 && onClickCell(meta.context || 0);\n    },\n    filterEvents: (event) => true,\n    threshold: 500,\n    captureEvent: true,\n    cancelOnMovement: false,\n    cancelOutsideElement: true,\n    detect: LongPressEventType.Pointer,\n  });\n  const handlers = (selectedIndex: number) => bind(selectedIndex);\n\n  const onClickCell = (selectedIndex: number) => {\n    let updatedOpenedCellList = [...openedCellsList];\n\n    if (generatedGrid[selectedIndex] === -1) {\n      setIsBombClicked(true);\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList)\n    } else if (generatedGrid[selectedIndex] === 0) {\n      setOpenedCellsList(openSurroundingCells(selectedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n    } else if (updatedOpenedCellList[selectedIndex] === 1) {\n      let bombClicked = false;\n      if (selectedIndex < mineSize) {\n        if (selectedIndex === 0) {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1 && updatedOpenedCellList[selectedIndex + mineSize] !== -1 && updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            blinkerTile([selectedIndex + 1, selectedIndex + mineSize, selectedIndex + mineSize + 1]);\n          } else {\n            if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex+1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex+mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize + 1] === 0 ? openSurroundingCells(selectedIndex+mineSize+1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n            }\n          }\n        } else if (selectedIndex === mineSize-1) {\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex-1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize - 1] === 0 ? openSurroundingCells(selectedIndex + mineSize -1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n        } else {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize + 1] === 0 ? openSurroundingCells(selectedIndex + mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize - 1] === 0 ? openSurroundingCells(selectedIndex + mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n        }\n      } else if (selectedIndex >= (mineSize*(mineSize-1))) {\n        if (selectedIndex%mineSize === 0) {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize + 1] === 0 ? openSurroundingCells(selectedIndex - mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n        } else if (selectedIndex%mineSize === mineSize-1) {\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize - 1] === 0 ? openSurroundingCells(selectedIndex - mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n        } else {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize + 1] === 0 ? openSurroundingCells(selectedIndex - mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize - 1] === 0 ? openSurroundingCells(selectedIndex - mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n        }\n      } else {\n        if (selectedIndex%mineSize === 0) {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize + 1] === 0 ? openSurroundingCells(selectedIndex + mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize + 1] === 0 ? openSurroundingCells(selectedIndex - mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n        } else if (selectedIndex%mineSize === mineSize - 1) {\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize - 1] === 0 ? openSurroundingCells(selectedIndex + mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize - 1] === 0 ? openSurroundingCells(selectedIndex - mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n        } else {\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize - 1] === 0 ? openSurroundingCells(selectedIndex + mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex + mineSize + 1] === 0 ? openSurroundingCells(selectedIndex + mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize - 1] === 0 ? openSurroundingCells(selectedIndex - mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n          }\n          if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n            updatedOpenedCellList = generatedGrid[selectedIndex - mineSize + 1] === 0 ? openSurroundingCells(selectedIndex - mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n            bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n          }\n        }\n      }\n      setOpenedCellsList(updatedOpenedCellList);\n      setIsBombClicked(bombClicked);\n    } else {\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList);\n    }\n  }\n\n  const onLongClickCell = (selectedIndex: number) => {\n    const updatedOpenedCellList = [...openedCellsList];\n    if (updatedOpenedCellList[selectedIndex] !== 1) {\n      updatedOpenedCellList[selectedIndex] = updatedOpenedCellList[selectedIndex] === -1 ? 0 : -1;\n      setOpenedCellsList(updatedOpenedCellList);\n    }\n  }\n\n  const flag = (openStatus: number) => (\n    <div className='flag'>\n      <div className={`base ${openStatus === 0 && 'base-red'}`} />\n    </div>\n  );\n\n  const returnMineRows = () => {\n    return generatedGrid.map((gridValue: number, index: number) => (\n      <div\n        className={`mineTile  ${isDarkMode ? 'mineDark' : 'mineLight'} ${openedCellsList[index] === -1 && 'flaggedTile'} ${openedCellsList[index] === 1 && 'not-A-Mine'} ${openedCellsList[index] === 1 && gridValue === -1 && 'mine'}`}\n        {...handlers(index)}\n        onContextMenu={(e) => {e.preventDefault();!isBombClicked && onLongClickCell(index);}}\n        style={isPaused ? unmountedStyle : mountedStyle}\n        key={`mine-${index}`}\n        id={`mine-${index}`}\n      >\n        {(openedCellsList[index] && openedCellsList[index] !== -1 && !isPaused) || isBombClicked ? (gridValue === -1 ? flag(openedCellsList[index]) : gridValue) : ''}\n      </div>\n    ))\n  }\n\n  const mountedStyle = {\n    animation: \"inAnimation 250ms ease-in\"\n  };\n  const unmountedStyle = {\n    animation: \"outAnimation 270ms ease-out\",\n    animationFillMode: \"forwards\"\n  };\n\n  const onResetClick = () => {\n    setOpenedCellsList(new Array(mineSize*mineSize).fill(0));\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n    setIsBombClicked(false);\n  }\n\n  return (\n    <div className='mineGridContainer'>\n      <Timer\n        allMinesIsolated={allMinesIsolated}\n        isBombClicked={isBombClicked}\n        isDarkMode={isDarkMode}\n        isPaused={isPaused}\n        onResetClick={onResetClick}\n        setPausedState={setPausedState}\n      />\n      <div className={`mineContainer ${isDarkMode ? 'dark' : 'light'}`}>\n        {returnMineRows()}\n\n        {isBombClicked && (\n          <div className={isDarkMode ? 'pausedScreenDark' : 'pausedScreen'} style={mountedStyle} >\n            <span className='gameOverText'>GAME OVER</span>\n          </div>\n        )}\n        {!isBombClicked && allMinesIsolated && (\n          <div className={isDarkMode ? 'pausedScreenDark' : 'pausedScreen'} style={mountedStyle} >\n            <span className='youWinText'>YOU WIN!</span>\n          </div>\n        )}\n        {isPaused && (\n          <div className={isDarkMode ? 'pausedScreenDark' : 'pausedScreen'} style={mountedStyle} >\n            <div className='pauseIcon' />\n            <span>PAUSED</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default MineGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}