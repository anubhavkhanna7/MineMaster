{"ast":null,"code":"import{useEffect,useState}from'react';import{LongPressEventType,useLongPress}from\"use-long-press\";import calculateMatrix from'../../utils/gridGenerator';import'./MineGrid.css';import{matchAllOpenedTiles,openSurroundingCells}from'../../utils/Utilities';import Timer from'./Timer';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function MineGrid(_ref){let{isDarkMode}=_ref;const mineSize=9,dificulty='EASY';const[isBombClicked,setIsBombClicked]=useState(false);const[allMinesIsolated,setAllMinesIsolated]=useState(false);const[openedCellsList,setOpenedCellsList]=useState(new Array(mineSize*mineSize).fill(0));const[generatedGrid,updateGeneratedGrid]=useState(new Array(mineSize*mineSize).fill(0));const[isPaused,setPausedState]=useState(false);useEffect(()=>{updateGeneratedGrid(calculateMatrix(mineSize,dificulty));},[]);useEffect(()=>{matchAllOpenedTiles(openedCellsList,generatedGrid)&&setAllMinesIsolated(true);},[openedCellsList]);const bind=useLongPress(()=>undefined,{onFinish:(event,meta)=>{!isBombClicked&&onLongClickCell(meta.context||0);},onCancel:(event,meta)=>{!isBombClicked&&onClickCell(meta.context||0);},filterEvents:event=>true,threshold:500,captureEvent:true,cancelOnMovement:false,cancelOutsideElement:true,detect:LongPressEventType.Pointer});const handlers=selectedIndex=>bind(selectedIndex);const onClickCell=selectedIndex=>{const updatedOpenedCellList=[...openedCellsList];if(generatedGrid[selectedIndex]){generatedGrid[selectedIndex]===-1&&setIsBombClicked(true);updatedOpenedCellList[selectedIndex]=1;setOpenedCellsList(updatedOpenedCellList);}else{setOpenedCellsList(openSurroundingCells(selectedIndex,updatedOpenedCellList,generatedGrid,mineSize));}};const onLongClickCell=selectedIndex=>{const updatedOpenedCellList=[...openedCellsList];updatedOpenedCellList[selectedIndex]=updatedOpenedCellList[selectedIndex]===-1?0:-1;setOpenedCellsList(updatedOpenedCellList);};const flag=openStatus=>/*#__PURE__*/_jsx(\"div\",{className:\"flag\",children:/*#__PURE__*/_jsx(\"div\",{className:\"base \".concat(openStatus===0&&'base-red')})});const returnMineRows=()=>{return generatedGrid.map((gridValue,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"mineTile  \".concat(isDarkMode?'mineDark':'mineLight',\" \").concat(openedCellsList[index]===-1&&'flaggedTile',\" \").concat(openedCellsList[index]===1&&'not-A-Mine',\" \").concat(openedCellsList[index]===1&&gridValue===-1&&'mine'),...handlers(index),style:isPaused?unmountedStyle:mountedStyle,children:openedCellsList[index]&&openedCellsList[index]!==-1&&!isPaused||isBombClicked?gridValue===-1?flag(openedCellsList[index]):gridValue:''}));};const mountedStyle={animation:\"inAnimation 250ms ease-in\"};const unmountedStyle={animation:\"outAnimation 270ms ease-out\",animationFillMode:\"forwards\"};const onResetClick=()=>{setOpenedCellsList(new Array(mineSize*mineSize).fill(0));updateGeneratedGrid(calculateMatrix(mineSize,dificulty));setIsBombClicked(false);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Timer,{allMinesIsolated:allMinesIsolated,isBombClicked:isBombClicked,isDarkMode:isDarkMode,isPaused:isPaused,onResetClick:onResetClick,setPausedState:setPausedState}),/*#__PURE__*/_jsxs(\"div\",{className:\"mineContainer \".concat(isDarkMode?'dark':'light'),children:[returnMineRows(),isBombClicked&&/*#__PURE__*/_jsx(\"div\",{className:isDarkMode?'pausedScreenDark':'pausedScreen',style:mountedStyle,children:/*#__PURE__*/_jsx(\"span\",{className:\"gameOverText\",children:\"GAME OVER\"})}),!isBombClicked&&allMinesIsolated&&/*#__PURE__*/_jsx(\"div\",{className:isDarkMode?'pausedScreenDark':'pausedScreen',style:mountedStyle,children:/*#__PURE__*/_jsx(\"span\",{className:\"youWinText\",children:\"YOU WIN!\"})}),isPaused&&/*#__PURE__*/_jsxs(\"div\",{className:isDarkMode?'pausedScreenDark':'pausedScreen',style:mountedStyle,children:[/*#__PURE__*/_jsx(\"div\",{className:\"pauseIcon\"}),/*#__PURE__*/_jsx(\"span\",{children:\"PAUSED\"})]})]})]});}export default MineGrid;","map":{"version":3,"names":["useEffect","useState","LongPressEventType","useLongPress","calculateMatrix","matchAllOpenedTiles","openSurroundingCells","Timer","jsx","_jsx","jsxs","_jsxs","MineGrid","_ref","isDarkMode","mineSize","dificulty","isBombClicked","setIsBombClicked","allMinesIsolated","setAllMinesIsolated","openedCellsList","setOpenedCellsList","Array","fill","generatedGrid","updateGeneratedGrid","isPaused","setPausedState","bind","undefined","onFinish","event","meta","onLongClickCell","context","onCancel","onClickCell","filterEvents","threshold","captureEvent","cancelOnMovement","cancelOutsideElement","detect","Pointer","handlers","selectedIndex","updatedOpenedCellList","flag","openStatus","className","children","concat","returnMineRows","map","gridValue","index","style","unmountedStyle","mountedStyle","animation","animationFillMode","onResetClick"],"sources":["/Users/anubhavkhanna/Desktop/Code Repos/MineMaster/src/Components/MineGrid/MineGrid.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { LongPressEventType, useLongPress } from \"use-long-press\";\nimport calculateMatrix from '../../utils/gridGenerator';\nimport './MineGrid.css'\nimport { matchAllOpenedTiles, openSurroundingCells } from '../../utils/Utilities';\nimport Timer from './Timer';\n\nfunction MineGrid({isDarkMode}: {isDarkMode: boolean}) {\n  const mineSize = 9, dificulty = 'EASY';\n  const [isBombClicked, setIsBombClicked] = useState(false);\n  const [allMinesIsolated, setAllMinesIsolated] = useState(false);\n  const [openedCellsList, setOpenedCellsList] = useState(new Array(mineSize*mineSize).fill(0));\n  const [generatedGrid, updateGeneratedGrid] = useState(new Array(mineSize*mineSize).fill(0));\n  const [isPaused, setPausedState] = useState(false);\n  \n  useEffect(() => {\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n  }, []);\n\n  useEffect(() => {\n    (matchAllOpenedTiles(openedCellsList, generatedGrid) && setAllMinesIsolated(true));\n  }, [openedCellsList]);\n\n  const bind = useLongPress(() => undefined, {\n    onFinish: (event, meta: {context ?:number|undefined}) => {\n      !isBombClicked && onLongClickCell(meta.context || 0);\n    },\n    onCancel: (event, meta: {context ?:number|undefined}) => {\n      !isBombClicked && onClickCell(meta.context || 0);\n    },\n    filterEvents: (event) => true,\n    threshold: 500,\n    captureEvent: true,\n    cancelOnMovement: false,\n    cancelOutsideElement: true,\n    detect: LongPressEventType.Pointer,\n  });\n  const handlers = (selectedIndex: number) => bind(selectedIndex);\n\n  const onClickCell = (selectedIndex: number) => {\n    const updatedOpenedCellList = [...openedCellsList];\n\n    if (generatedGrid[selectedIndex]) {\n      generatedGrid[selectedIndex] === -1 && setIsBombClicked(true);\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList)\n    } else {\n      setOpenedCellsList(openSurroundingCells(selectedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n    }\n  }\n\n  const onLongClickCell = (selectedIndex: number) => {\n    const updatedOpenedCellList = [...openedCellsList];\n    updatedOpenedCellList[selectedIndex] = updatedOpenedCellList[selectedIndex] === -1 ? 0 : -1;\n    setOpenedCellsList(updatedOpenedCellList);\n  }\n\n  const flag = (openStatus: number) => (\n    <div className='flag'>\n      <div className={`base ${openStatus === 0 && 'base-red'}`} />\n    </div>\n  );\n\n  const returnMineRows = () => {\n    return generatedGrid.map((gridValue: number, index: number) => (\n      <div\n        className={`mineTile  ${isDarkMode ? 'mineDark' : 'mineLight'} ${openedCellsList[index] === -1 && 'flaggedTile'} ${openedCellsList[index] === 1 && 'not-A-Mine'} ${openedCellsList[index] === 1 && gridValue === -1 && 'mine'}`}\n        {...handlers(index)}\n        style={isPaused ? unmountedStyle : mountedStyle}\n      >\n        {(openedCellsList[index] && openedCellsList[index] !== -1 && !isPaused) || isBombClicked ? (gridValue === -1 ? flag(openedCellsList[index]) : gridValue) : ''}\n      </div>\n    ))\n  }\n\n  const mountedStyle = {\n    animation: \"inAnimation 250ms ease-in\"\n  };\n  const unmountedStyle = {\n    animation: \"outAnimation 270ms ease-out\",\n    animationFillMode: \"forwards\"\n  };\n\n  const onResetClick = () => {\n    setOpenedCellsList(new Array(mineSize*mineSize).fill(0));\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n    setIsBombClicked(false);\n  }\n\n  return (\n    <div>\n      <Timer\n        allMinesIsolated={allMinesIsolated}\n        isBombClicked={isBombClicked}\n        isDarkMode={isDarkMode}\n        isPaused={isPaused}\n        onResetClick={onResetClick}\n        setPausedState={setPausedState}\n      />\n      <div className={`mineContainer ${isDarkMode ? 'dark' : 'light'}`}>\n        {returnMineRows()}\n\n        {isBombClicked && (\n          <div className={isDarkMode ? 'pausedScreenDark' : 'pausedScreen'} style={mountedStyle} >\n            <span className='gameOverText'>GAME OVER</span>\n          </div>\n        )}\n        {!isBombClicked && allMinesIsolated && (\n          <div className={isDarkMode ? 'pausedScreenDark' : 'pausedScreen'} style={mountedStyle} >\n            <span className='youWinText'>YOU WIN!</span>\n          </div>\n        )}\n        {isPaused && (\n          <div className={isDarkMode ? 'pausedScreenDark' : 'pausedScreen'} style={mountedStyle} >\n            <div className='pauseIcon' />\n            <span>PAUSED</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default MineGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}