{"ast":null,"code":"export const fetchGameStats = () => {\n  const defaultStats = {\n    'NOVICE': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'EASY': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'MEDIUM': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'HARD': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'EXTREME': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'INSANE': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    }\n  };\n  let stats;\n  if (localStorage.getItem('mineMasterStats')) {\n    // @ts-ignore\n    stats = JSON.parse(localStorage.getItem('mineMasterStats'));\n  } else {\n    localStorage.setItem('mineMasterStats', JSON.stringify(defaultStats));\n    stats = defaultStats;\n  }\n  return stats;\n};\nexport const findGameStatsForDificulty = dificulty => {};\nexport const updateGameStats = (dificultyLevel, currentGameStats) => {\n  const stats = fetchGameStats();\n  const currentStats = stats[dificultyLevel];\n  currentStats.gamesPlayed++;\n  currentGameStats.gameWon ? currentStats.wins++ : currentStats.losses++;\n  currentStats.winPercentage = currentStats.wins / currentStats.gamesPlayed * 100;\n  currentStats.bestTime = currentGameStats.gameWon ? findSmallerTime(currentStats.bestTime, currentGameStats.gameTime) : currentStats.bestTime;\n  currentStats.averageTime = currentGameStats.gameWon ? calculateAvgTime(currentStats.gamesPlayed, currentStats.averageTime, currentGameStats.gameTime) : currentStats.averageTime;\n  stats[dificultyLevel] = currentStats;\n  localStorage.setItem('mineMasterStats', JSON.stringify(stats));\n};\nconst findSmallerTime = (time1, time2) => {\n  if (time1 === '') return time2;\n  return calculateSecondCount(time1) > calculateSecondCount(time2) ? time2 : time1;\n};\nconst calculateAvgTime = (gamesPlayed, averageTime, newTime) => {\n  if (averageTime === '') return newTime;\n  const avgSeconds = calculateSecondCount(averageTime);\n  const newSeconds = calculateSecondCount(newTime);\n  console.log(avgSeconds, newSeconds);\n  const newAverageSeconds = gamesPlayed === 1 ? (avgSeconds * gamesPlayed + newSeconds) / gamesPlayed : (avgSeconds * (gamesPlayed - 1) + newSeconds) / gamesPlayed;\n  return `${Math.floor(newAverageSeconds / 60) < 60 ? 0 : Math.floor(Math.floor(newAverageSeconds / 60) / 60)} : ${Math.floor(newAverageSeconds / 60) % 60} : ${Math.abs(newAverageSeconds % 60)}`;\n};\nconst calculateSecondCount = time => {\n  const splitTime = time.split(' : ');\n  console.log(time, splitTime);\n  return parseInt(splitTime[0]) * 3600 + parseInt(splitTime[1]) * 60 + parseInt(splitTime[2]);\n};","map":{"version":3,"names":["fetchGameStats","defaultStats","gamesPlayed","wins","losses","bestTime","averageTime","winPercentage","stats","localStorage","getItem","JSON","parse","setItem","stringify","findGameStatsForDificulty","dificulty","updateGameStats","dificultyLevel","currentGameStats","currentStats","gameWon","findSmallerTime","gameTime","calculateAvgTime","time1","time2","calculateSecondCount","newTime","avgSeconds","newSeconds","console","log","newAverageSeconds","Math","floor","abs","time","splitTime","split","parseInt"],"sources":["/Users/anubhavkhanna/Desktop/Code Repos/MineMaster/src/utils/localStorage.ts"],"sourcesContent":["interface gameStatus {\n  gameTime: string\n  gameWon: boolean\n}\n\nexport const fetchGameStats = () => {\n  const defaultStats = {\n    'NOVICE': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'EASY': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'MEDIUM': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'HARD': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'EXTREME': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    },\n    'INSANE': {\n      gamesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      bestTime: '',\n      averageTime: '',\n      winPercentage: 0\n    }\n  }\n\n  let stats;\n  if (localStorage.getItem('mineMasterStats')) {\n    // @ts-ignore\n    stats = JSON.parse(localStorage.getItem('mineMasterStats'))\n  } else {\n    localStorage.setItem('mineMasterStats', JSON.stringify(defaultStats))\n    stats = defaultStats;\n  }\n  return stats;\n}\n\nexport const findGameStatsForDificulty = (dificulty: string) => {\n  \n}\n\nexport const updateGameStats = (dificultyLevel: string, currentGameStats: gameStatus) => {\n  const stats = fetchGameStats();\n  const currentStats = stats[dificultyLevel];\n  currentStats.gamesPlayed++;\n  currentGameStats.gameWon ? currentStats.wins ++ : currentStats.losses++;\n  currentStats.winPercentage = (currentStats.wins/currentStats.gamesPlayed) * 100;\n  currentStats.bestTime = currentGameStats.gameWon ? findSmallerTime(currentStats.bestTime, currentGameStats.gameTime) : currentStats.bestTime;\n  currentStats.averageTime = currentGameStats.gameWon ? calculateAvgTime(currentStats.gamesPlayed, currentStats.averageTime, currentGameStats.gameTime) : currentStats.averageTime;\n\n  stats[dificultyLevel] = currentStats;\n  localStorage.setItem('mineMasterStats', JSON.stringify(stats))\n}\n\nconst findSmallerTime = (time1: string, time2: string) => {\n  if (time1 === '') return time2;\n  return calculateSecondCount(time1) > calculateSecondCount(time2) ? time2 : time1;\n}\n\nconst calculateAvgTime = (gamesPlayed: number, averageTime: string, newTime: string) => {\n  if (averageTime === '') return newTime;\n  const avgSeconds = calculateSecondCount(averageTime);\n  const newSeconds = calculateSecondCount(newTime);\n  console.log(avgSeconds, newSeconds)\n  const newAverageSeconds = gamesPlayed === 1 ? ((avgSeconds * (gamesPlayed)) + newSeconds)/gamesPlayed : ((avgSeconds * (gamesPlayed -1)) + newSeconds)/gamesPlayed;\n  return `${Math.floor(newAverageSeconds/60) < 60 ? 0 : Math.floor(Math.floor(newAverageSeconds/60)/60)} : ${(Math.floor(newAverageSeconds/60))%60} : ${Math.abs(newAverageSeconds%60)}`\n}\n\nconst calculateSecondCount = (time: string) => {\n  const splitTime = time.split(' : ')\n  console.log(time, splitTime)\n  return parseInt(splitTime[0]) * 3600 + parseInt(splitTime[1]) * 60 + parseInt(splitTime[2])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}