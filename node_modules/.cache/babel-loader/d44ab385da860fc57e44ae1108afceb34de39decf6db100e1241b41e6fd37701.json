{"ast":null,"code":"function createdGridWithMines(totalTiles, mineCount) {\n  let grid = Array(totalTiles).fill(0);\n  while (mineCount > 0) {\n    let mineTile = Math.floor(Math.random() * totalTiles);\n    if (grid[mineTile] !== -1) {\n      grid[mineTile] = -1;\n      mineCount--;\n    }\n  }\n  return grid;\n}\nfunction fillMineHints(createdGrid, colLength) {\n  let rowLength = Math.floor(createdGrid.length / colLength);\n  for (let rowIndex = 0; rowIndex < rowLength; rowIndex++) {\n    for (let colIndex = 0; colIndex < colLength; colIndex++) {\n      let sum = 0;\n      if (createdGrid[rowIndex * colLength + colIndex] !== -1) {\n        if (rowIndex === 0 && colIndex === 0) {\n          // first row and first column\n          sum += createdGrid[rowIndex * colLength + colIndex + 1] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex + 1) * colLength + colIndex] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex + 1) * colLength + colIndex + 1] === -1 ? 1 : 0;\n        } else if (rowIndex === 0 && colIndex !== colLength - 1) {\n          // First row and not last column\n          sum += createdGrid[rowIndex * colLength + colIndex - 1] === -1 ? 1 : 0;\n          sum += createdGrid[rowIndex * colLength + colIndex + 1] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex + 1) * colLength + colIndex - 1] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex + 1) * colLength + colIndex] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex + 1) * colLength + colIndex + 1] === -1 ? 1 : 0;\n        } else if (rowIndex === 0 && colIndex === colLength - 1) {\n          // first row and last column\n          sum += createdGrid[rowIndex * colLength + colIndex - 1] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex + 1) * colLength + colIndex - 1] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex + 1) * colLength + colIndex] === -1 ? 1 : 0;\n        } else if (rowIndex !== rowLength - 1 && colIndex === 0) {\n          // not last row and first column \n          sum += createdGrid[(rowIndex - 1) * colLength + colIndex] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex + 1) * colLength + colIndex] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex - 1) * colLength + colIndex + 1] === -1 ? 1 : 0;\n          sum += createdGrid[rowIndex * colLength + colIndex + 1] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex + 1) * colLength + colIndex + 1] === -1 ? 1 : 0;\n        } else if (rowIndex === rowLength - 1 && colIndex === 0) {\n          // last row and first column\n          sum += createdGrid[(rowIndex - 1) * colLength + colIndex] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex - 1) * colLength + colIndex + 1] === -1 ? 1 : 0;\n          sum += createdGrid[rowIndex * colLength + colIndex + 1] === -1 ? 1 : 0;\n        } else if (rowIndex !== rowLength - 1 && rowIndex !== 0 && colIndex !== colLength - 1) {\n          // last row and first column\n          sum += createdGrid[(rowIndex - 1) * colLength + colIndex] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex - 1) * colLength + colIndex + 1] === -1 ? 1 : 0;\n          sum += createdGrid[rowIndex * colLength + colIndex + 1] === -1 ? 1 : 0;\n        } else {\n          sum += createdGrid[(rowIndex - 1) * colLength + colIndex - 1] === -1 ? 1 : 0;\n          sum += createdGrid[rowIndex * colLength + colIndex - 1] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex + 1) * colLength + colIndex - 1] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex - 1) * colLength + colIndex] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex + 1) * colLength + colIndex] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex - 1) * colLength + colIndex + 1] === -1 ? 1 : 0;\n          sum += createdGrid[rowIndex * colLength + colIndex + 1] === -1 ? 1 : 0;\n          sum += createdGrid[(rowIndex + 1) * colLength + colIndex + 1] === -1 ? 1 : 0;\n        }\n        createdGrid[rowIndex * colLength + colIndex] = sum;\n      }\n    }\n  }\n  return createdGrid;\n}\nexport default function calculateMatrix(size = 9, dificulty = 'EASY', customMines = 0) {\n  let totalTiles = size * size;\n  let countOfMines = 0;\n  switch (dificulty) {\n    case 'NOVICE':\n      countOfMines = totalTiles * 10 / 100;\n      break;\n    case 'EASY':\n      countOfMines = totalTiles * 15 / 100;\n      break;\n    case 'MEDIUM':\n      countOfMines = totalTiles * 20 / 100;\n      break;\n    case 'HARD':\n      countOfMines = totalTiles * 25 / 100;\n      break;\n    case 'EXTREME':\n      countOfMines = totalTiles * 30 / 100;\n      break;\n    case 'INSANE':\n      countOfMines = totalTiles * 35 / 100;\n      break;\n    case 'CUSTOM':\n      countOfMines = customMines;\n      break;\n  }\n  return fillMineHints(createdGridWithMines(totalTiles, countOfMines), size);\n}","map":{"version":3,"names":["createdGridWithMines","totalTiles","mineCount","grid","Array","fill","mineTile","Math","floor","random","fillMineHints","createdGrid","colLength","rowLength","length","rowIndex","colIndex","sum","calculateMatrix","size","dificulty","customMines","countOfMines"],"sources":["/Users/anubhavkhanna/Desktop/Code Repos/MineMaster/src/utils/gridGenerator.ts"],"sourcesContent":["function createdGridWithMines(totalTiles: number, mineCount: number) {\n  let grid = Array(totalTiles).fill(0);\n  while (mineCount > 0) {\n    let mineTile = Math.floor(Math.random() * (totalTiles));\n    if(grid[mineTile] !== -1) {\n      grid[mineTile] = -1;\n      mineCount--;\n    }\n  }\n  return grid;\n}\n\nfunction fillMineHints(createdGrid: Array<number>, colLength: number) {\n  let rowLength = Math.floor(createdGrid.length/colLength);\n  for (let rowIndex = 0; rowIndex < rowLength; rowIndex++) {\n    for (let colIndex = 0; colIndex<colLength; colIndex++) {\n      let sum = 0;\n      if(createdGrid[rowIndex*colLength + colIndex] !== -1) {\n        if(rowIndex === 0 && colIndex === 0) {\n          // first row and first column\n          sum+= createdGrid[rowIndex*colLength + colIndex+1] === -1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex] === -1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex+1] === -1 ? 1 : 0;\n        } else if (rowIndex === 0 && colIndex !== colLength-1) {\n          // First row and not last column\n          sum+= createdGrid[rowIndex*colLength + colIndex-1] ===-1 ? 1 : 0;\n          sum+= createdGrid[rowIndex*colLength + colIndex+1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex-1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex+1] ===-1 ? 1 : 0;\n        } else if (rowIndex === 0 && colIndex === colLength-1) {\n          // first row and last column\n          sum+= createdGrid[rowIndex*colLength + colIndex-1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex-1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex] ===-1 ? 1 : 0;\n        } else if (rowIndex !== rowLength-1 && colIndex === 0) {\n          // not last row and first column \n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex + 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[rowIndex*colLength + colIndex + 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex + 1] ===-1 ? 1 : 0;\n        } else if (rowIndex === rowLength-1 && colIndex === 0) {\n          // last row and first column\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex + 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[rowIndex*colLength + colIndex + 1] ===-1 ? 1 : 0;\n        } else if (rowIndex !== rowLength-1 && rowIndex !== 0 && colIndex !== colLength-1) {\n          // last row and first column\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex + 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[rowIndex*colLength + colIndex + 1] ===-1 ? 1 : 0;\n        } else {\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex - 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[rowIndex*colLength + colIndex - 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex - 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex-1)*colLength + colIndex + 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[rowIndex*colLength + colIndex + 1] ===-1 ? 1 : 0;\n          sum+= createdGrid[(rowIndex+1)*colLength + colIndex + 1] ===-1 ? 1 : 0;\n        }\n        createdGrid[rowIndex*colLength + colIndex] = sum;\n      }\n    }\n  }\n  return createdGrid;\n}\n\nexport default function calculateMatrix(size = 9, dificulty = 'EASY', customMines = 0) {\n  let totalTiles = size * size;\n  let countOfMines = 0;\n  switch (dificulty) {\n    case 'NOVICE':\n      countOfMines = (totalTiles*10)/100;\n      break;\n    case 'EASY':\n      countOfMines = (totalTiles*15)/100;\n      break;\n    case 'MEDIUM':\n      countOfMines = (totalTiles*20)/100;\n      break;\n    case 'HARD':\n      countOfMines = (totalTiles*25)/100;\n      break;\n    case 'EXTREME':\n      countOfMines = (totalTiles*30)/100;\n      break;\n    case 'INSANE':\n      countOfMines = (totalTiles*35)/100;\n      break;\n    case 'CUSTOM':\n      countOfMines = customMines;\n      break;\n  }\n  return fillMineHints(createdGridWithMines(totalTiles, countOfMines), size);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}