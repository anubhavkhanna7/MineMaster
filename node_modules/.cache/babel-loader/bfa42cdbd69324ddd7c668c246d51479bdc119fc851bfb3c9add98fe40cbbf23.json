{"ast":null,"code":"import{useEffect,useState}from'react';import{LongPressEventType,useLongPress}from\"use-long-press\";import calculateMatrix from'../../utils/gridGenerator';import'./MineGrid.css';import{convertToTime,matchAllOpenedTiles,openSurroundingCells}from'../../utils/Utilities';import Timer from'./Timer';import{updateGameStats}from'../../utils/localStorage';import{jsx as _jsx}from\"react/jsx-runtime\";import{createElement as _createElement}from\"react\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function MineGrid(_ref){let{isDarkMode,selectedDificulty}=_ref;const mineSize=9;const[isBombClicked,setIsBombClicked]=useState(false);const[allMinesIsolated,setAllMinesIsolated]=useState(false);const[openedCellsList,setOpenedCellsList]=useState(new Array(mineSize*mineSize).fill(0));const[generatedGrid,updateGeneratedGrid]=useState(new Array(mineSize*mineSize).fill(0));const[isPaused,setPausedState]=useState(false);const[timer,setTimer]=useState(0);const[gameStats,setGameStats]=useState({});useEffect(()=>{updateGeneratedGrid(calculateMatrix(mineSize,selectedDificulty));},[]);useEffect(()=>{if(allMinesIsolated){setGameStats(updateGameStats(selectedDificulty,{gameTime:convertToTime(timer),gameWon:true}));}if(isBombClicked){setGameStats(updateGameStats(selectedDificulty,{gameTime:convertToTime(timer),gameWon:false}));}},[allMinesIsolated,timer,isBombClicked]);useEffect(()=>{matchAllOpenedTiles(openedCellsList,generatedGrid)&&setAllMinesIsolated(true);},[openedCellsList]);const blinkerTile=tileList=>{tileList.forEach(tileIndex=>{var _document$getElementB;// @ts-ignore\nopenedCellsList[tileIndex]!==1&&((_document$getElementB=document.getElementById(\"mine-\".concat(tileIndex)))===null||_document$getElementB===void 0?void 0:_document$getElementB.classList.add('blinker'));});setTimeout(()=>{tileList.forEach(tileIndex=>{var _document$getElementB2;(_document$getElementB2=document.getElementById(\"mine-\".concat(tileIndex)))===null||_document$getElementB2===void 0?void 0:_document$getElementB2.classList.remove('blinker');});},1000);};const bind=useLongPress(()=>undefined,{onFinish:(event,meta)=>{event.preventDefault();!isBombClicked&&onLongClickCell(meta.context||0);},onCancel:(event,meta)=>{// @ts-ignore\n!isBombClicked&&event.button!==2&&onClickCell(meta.context||0);},filterEvents:event=>true,threshold:500,captureEvent:true,cancelOnMovement:false,cancelOutsideElement:true,detect:LongPressEventType.Pointer});const handlers=selectedIndex=>bind(selectedIndex);const onClickCell=selectedIndex=>{let updatedOpenedCellList=[...openedCellsList];if(generatedGrid[selectedIndex]===-1){setIsBombClicked(true);updatedOpenedCellList[selectedIndex]=1;setOpenedCellsList(updatedOpenedCellList);}else if(generatedGrid[selectedIndex]===0){setOpenedCellsList(openSurroundingCells(selectedIndex,updatedOpenedCellList,generatedGrid,mineSize));}else if(updatedOpenedCellList[selectedIndex]===1){let bombClicked=false;if(selectedIndex<mineSize){if(selectedIndex===0){let flagcount=0;updatedOpenedCellList[selectedIndex+1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex+mineSize]===-1&&flagcount++;updatedOpenedCellList[selectedIndex+mineSize+1]===-1&&flagcount++;if(updatedOpenedCellList[selectedIndex+1]!==-1&&updatedOpenedCellList[selectedIndex+mineSize]!==-1&&updatedOpenedCellList[selectedIndex+mineSize+1]!==-1){blinkerTile([selectedIndex+1,selectedIndex+mineSize,selectedIndex+mineSize+1]);}else if(flagcount===generatedGrid[selectedIndex]){if(updatedOpenedCellList[selectedIndex+1]!==-1){updatedOpenedCellList[selectedIndex+1]=1;updatedOpenedCellList=generatedGrid[selectedIndex+1]===0?openSurroundingCells(selectedIndex+1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+1]===-1;}if(updatedOpenedCellList[selectedIndex+mineSize]!==-1){updatedOpenedCellList[selectedIndex+mineSize]=1;updatedOpenedCellList=generatedGrid[selectedIndex+mineSize]===0?openSurroundingCells(selectedIndex+mineSize,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+mineSize]===-1;}if(updatedOpenedCellList[selectedIndex+mineSize+1]!==-1){updatedOpenedCellList[selectedIndex+mineSize+1]=1;updatedOpenedCellList=generatedGrid[selectedIndex+mineSize+1]===0?openSurroundingCells(selectedIndex+mineSize+1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+mineSize+1]===-1;}}}else if(selectedIndex===mineSize-1){let flagcount=0;updatedOpenedCellList[selectedIndex-1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex+mineSize]===-1&&flagcount++;updatedOpenedCellList[selectedIndex+mineSize-1]===-1&&flagcount++;if(updatedOpenedCellList[selectedIndex-1]!==-1&&updatedOpenedCellList[selectedIndex+mineSize]!==-1&&updatedOpenedCellList[selectedIndex+mineSize-1]!==-1){blinkerTile([selectedIndex-1,selectedIndex+mineSize,selectedIndex+mineSize-1]);}else if(flagcount===generatedGrid[selectedIndex]){if(updatedOpenedCellList[selectedIndex-1]!==-1){updatedOpenedCellList[selectedIndex-1]=1;updatedOpenedCellList=generatedGrid[selectedIndex-1]===0?openSurroundingCells(selectedIndex-1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-1]===-1;}if(updatedOpenedCellList[selectedIndex+mineSize]!==-1){updatedOpenedCellList[selectedIndex+mineSize]=1;updatedOpenedCellList=generatedGrid[selectedIndex+mineSize]===0?openSurroundingCells(selectedIndex+mineSize,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+mineSize]===-1;}if(updatedOpenedCellList[selectedIndex+mineSize-1]!==-1){updatedOpenedCellList[selectedIndex+mineSize-1]=1;updatedOpenedCellList=generatedGrid[selectedIndex+mineSize-1]===0?openSurroundingCells(selectedIndex+mineSize-1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+mineSize-1]===-1;}}}else{let flagcount=0;updatedOpenedCellList[selectedIndex+1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex+mineSize]===-1&&flagcount++;updatedOpenedCellList[selectedIndex+mineSize+1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex+mineSize-1]===-1&&flagcount++;if(updatedOpenedCellList[selectedIndex+1]!==-1&&updatedOpenedCellList[selectedIndex-1]!==-1&&updatedOpenedCellList[selectedIndex+mineSize]!==-1&&updatedOpenedCellList[selectedIndex+mineSize+1]!==-1&&updatedOpenedCellList[selectedIndex+mineSize-1]!==-1){blinkerTile([selectedIndex+1,selectedIndex-1,selectedIndex+mineSize,selectedIndex+mineSize+1,selectedIndex+mineSize-1]);}else if(flagcount===generatedGrid[selectedIndex]){if(updatedOpenedCellList[selectedIndex+1]!==-1){updatedOpenedCellList[selectedIndex+1]=1;updatedOpenedCellList=generatedGrid[selectedIndex+1]===0?openSurroundingCells(selectedIndex+1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+1]===-1;}if(updatedOpenedCellList[selectedIndex-1]!==-1){updatedOpenedCellList[selectedIndex-1]=1;updatedOpenedCellList=generatedGrid[selectedIndex-1]===0?openSurroundingCells(selectedIndex-1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-1]===-1;}if(updatedOpenedCellList[selectedIndex+mineSize]!==-1){updatedOpenedCellList[selectedIndex+mineSize]=1;updatedOpenedCellList=generatedGrid[selectedIndex+mineSize]===0?openSurroundingCells(selectedIndex+mineSize,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+mineSize]===-1;}if(updatedOpenedCellList[selectedIndex+mineSize+1]!==-1){updatedOpenedCellList[selectedIndex+mineSize+1]=1;updatedOpenedCellList=generatedGrid[selectedIndex+mineSize+1]===0?openSurroundingCells(selectedIndex+mineSize+1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+mineSize+1]===-1;}if(updatedOpenedCellList[selectedIndex+mineSize-1]!==-1){updatedOpenedCellList[selectedIndex+mineSize-1]=1;updatedOpenedCellList=generatedGrid[selectedIndex+mineSize-1]===0?openSurroundingCells(selectedIndex+mineSize-1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+mineSize-1]===-1;}}}}else if(selectedIndex>=mineSize*(mineSize-1)){if(selectedIndex%mineSize===0){let flagcount=0;updatedOpenedCellList[selectedIndex+1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-mineSize]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-mineSize+1]===-1&&flagcount++;if(updatedOpenedCellList[selectedIndex+1]!==-1&&updatedOpenedCellList[selectedIndex-mineSize]!==-1&&updatedOpenedCellList[selectedIndex-mineSize+1]!==-1){blinkerTile([selectedIndex+1,selectedIndex-mineSize,selectedIndex-mineSize+1]);}else if(flagcount===generatedGrid[selectedIndex]){if(updatedOpenedCellList[selectedIndex+1]!==-1){updatedOpenedCellList[selectedIndex+1]=1;updatedOpenedCellList=generatedGrid[selectedIndex+1]===0?openSurroundingCells(selectedIndex+1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+1]===-1;}if(updatedOpenedCellList[selectedIndex-mineSize]!==-1){updatedOpenedCellList[selectedIndex-mineSize]=1;updatedOpenedCellList=generatedGrid[selectedIndex-mineSize]===0?openSurroundingCells(selectedIndex-mineSize,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-mineSize]===-1;}if(updatedOpenedCellList[selectedIndex-mineSize+1]!==-1){updatedOpenedCellList[selectedIndex-mineSize+1]=1;updatedOpenedCellList=generatedGrid[selectedIndex-mineSize+1]===0?openSurroundingCells(selectedIndex-mineSize+1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-mineSize+1]===-1;}}}else if(selectedIndex%mineSize===mineSize-1){let flagcount=0;updatedOpenedCellList[selectedIndex-1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-mineSize]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-mineSize-1]===-1&&flagcount++;if(updatedOpenedCellList[selectedIndex-1]!==-1&&updatedOpenedCellList[selectedIndex-mineSize]!==-1&&updatedOpenedCellList[selectedIndex-mineSize-1]!==-1){blinkerTile([selectedIndex-1,selectedIndex-mineSize,selectedIndex-mineSize-1]);}else if(flagcount===generatedGrid[selectedIndex]){if(updatedOpenedCellList[selectedIndex-1]!==-1){updatedOpenedCellList[selectedIndex-1]=1;updatedOpenedCellList=generatedGrid[selectedIndex-1]===0?openSurroundingCells(selectedIndex-1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-1]===-1;}if(updatedOpenedCellList[selectedIndex-mineSize]!==-1){updatedOpenedCellList[selectedIndex-mineSize]=1;updatedOpenedCellList=generatedGrid[selectedIndex-mineSize]===0?openSurroundingCells(selectedIndex-mineSize,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-mineSize]===-1;}if(updatedOpenedCellList[selectedIndex-mineSize-1]!==-1){updatedOpenedCellList[selectedIndex-mineSize-1]=1;updatedOpenedCellList=generatedGrid[selectedIndex-mineSize-1]===0?openSurroundingCells(selectedIndex-mineSize-1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-mineSize-1]===-1;}}}else{let flagcount=0;updatedOpenedCellList[selectedIndex+1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-mineSize]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-mineSize+1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-mineSize-1]===-1&&flagcount++;if(updatedOpenedCellList[selectedIndex+1]!==-1&&updatedOpenedCellList[selectedIndex-1]!==-1&&updatedOpenedCellList[selectedIndex-mineSize]!==-1&&updatedOpenedCellList[selectedIndex-mineSize+1]!==-1&&updatedOpenedCellList[selectedIndex-mineSize-1]!==-1){blinkerTile([selectedIndex+1,selectedIndex-1,selectedIndex-mineSize,selectedIndex-mineSize+1,selectedIndex-mineSize-1]);}else if(flagcount===generatedGrid[selectedIndex]){if(updatedOpenedCellList[selectedIndex+1]!==-1){updatedOpenedCellList[selectedIndex+1]=1;updatedOpenedCellList=generatedGrid[selectedIndex+1]===0?openSurroundingCells(selectedIndex+1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+1]===-1;}if(updatedOpenedCellList[selectedIndex-1]!==-1){updatedOpenedCellList[selectedIndex-1]=1;updatedOpenedCellList=generatedGrid[selectedIndex-1]===0?openSurroundingCells(selectedIndex-1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-1]===-1;}if(updatedOpenedCellList[selectedIndex-mineSize]!==-1){updatedOpenedCellList[selectedIndex-mineSize]=1;updatedOpenedCellList=generatedGrid[selectedIndex-mineSize]===0?openSurroundingCells(selectedIndex-mineSize,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-mineSize]===-1;}if(updatedOpenedCellList[selectedIndex-mineSize+1]!==-1){updatedOpenedCellList[selectedIndex-mineSize+1]=1;updatedOpenedCellList=generatedGrid[selectedIndex-mineSize+1]===0?openSurroundingCells(selectedIndex-mineSize+1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-mineSize+1]===-1;}if(updatedOpenedCellList[selectedIndex-mineSize-1]!==-1){updatedOpenedCellList[selectedIndex-mineSize-1]=1;updatedOpenedCellList=generatedGrid[selectedIndex-mineSize-1]===0?openSurroundingCells(selectedIndex-mineSize-1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-mineSize-1]===-1;}}}}else{if(selectedIndex%mineSize===0){let flagcount=0;updatedOpenedCellList[selectedIndex+1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-mineSize]===-1&&flagcount++;updatedOpenedCellList[selectedIndex+mineSize]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-mineSize+1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex+mineSize+1]===-1&&flagcount++;if(updatedOpenedCellList[selectedIndex+1]!==-1&&updatedOpenedCellList[selectedIndex+mineSize]!==-1&&updatedOpenedCellList[selectedIndex+mineSize+1]!==-1&&updatedOpenedCellList[selectedIndex-mineSize]!==-1&&updatedOpenedCellList[selectedIndex-mineSize+1]!==-1){blinkerTile([selectedIndex+1,selectedIndex+mineSize,selectedIndex+mineSize+1,selectedIndex-mineSize,selectedIndex-mineSize+1]);}else if(flagcount===generatedGrid[selectedIndex]){if(updatedOpenedCellList[selectedIndex+1]!==-1){updatedOpenedCellList[selectedIndex+1]=1;updatedOpenedCellList=generatedGrid[selectedIndex+1]===0?openSurroundingCells(selectedIndex+1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+1]===-1;}if(updatedOpenedCellList[selectedIndex+mineSize]!==-1){updatedOpenedCellList[selectedIndex+mineSize]=1;updatedOpenedCellList=generatedGrid[selectedIndex+mineSize]===0?openSurroundingCells(selectedIndex+mineSize,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+mineSize]===-1;}if(updatedOpenedCellList[selectedIndex+mineSize+1]!==-1){updatedOpenedCellList[selectedIndex+mineSize+1]=1;updatedOpenedCellList=generatedGrid[selectedIndex+mineSize+1]===0?openSurroundingCells(selectedIndex+mineSize+1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+mineSize+1]===-1;}if(updatedOpenedCellList[selectedIndex-mineSize]!==-1){updatedOpenedCellList[selectedIndex-mineSize]=1;updatedOpenedCellList=generatedGrid[selectedIndex-mineSize]===0?openSurroundingCells(selectedIndex-mineSize,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-mineSize]===-1;}if(updatedOpenedCellList[selectedIndex-mineSize+1]!==-1){updatedOpenedCellList[selectedIndex-mineSize+1]=1;updatedOpenedCellList=generatedGrid[selectedIndex-mineSize+1]===0?openSurroundingCells(selectedIndex-mineSize+1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-mineSize+1]===-1;}}}else if(selectedIndex%mineSize===mineSize-1){let flagcount=0;updatedOpenedCellList[selectedIndex-1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex+mineSize]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-mineSize]===-1&&flagcount++;updatedOpenedCellList[selectedIndex+mineSize-1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-mineSize-1]===-1&&flagcount++;if(updatedOpenedCellList[selectedIndex-1]!==-1&&updatedOpenedCellList[selectedIndex+mineSize]!==-1&&updatedOpenedCellList[selectedIndex+mineSize-1]!==-1&&updatedOpenedCellList[selectedIndex-mineSize]!==-1&&updatedOpenedCellList[selectedIndex-mineSize-1]!==-1){blinkerTile([selectedIndex-1,selectedIndex+mineSize,selectedIndex+mineSize-1,selectedIndex-mineSize,selectedIndex-mineSize-1]);}else if(flagcount===generatedGrid[selectedIndex]){if(updatedOpenedCellList[selectedIndex-1]!==-1){updatedOpenedCellList[selectedIndex-1]=1;updatedOpenedCellList=generatedGrid[selectedIndex-1]===0?openSurroundingCells(selectedIndex-1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-1]===-1;}if(updatedOpenedCellList[selectedIndex+mineSize]!==-1){updatedOpenedCellList[selectedIndex+mineSize]=1;updatedOpenedCellList=generatedGrid[selectedIndex+mineSize]===0?openSurroundingCells(selectedIndex+mineSize,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+mineSize]===-1;}if(updatedOpenedCellList[selectedIndex+mineSize-1]!==-1){updatedOpenedCellList[selectedIndex+mineSize-1]=1;updatedOpenedCellList=generatedGrid[selectedIndex+mineSize-1]===0?openSurroundingCells(selectedIndex+mineSize-1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+mineSize-1]===-1;}if(updatedOpenedCellList[selectedIndex-mineSize]!==-1){updatedOpenedCellList[selectedIndex-mineSize]=1;updatedOpenedCellList=generatedGrid[selectedIndex-mineSize]===0?openSurroundingCells(selectedIndex-mineSize,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-mineSize]===-1;}if(updatedOpenedCellList[selectedIndex-mineSize-1]!==-1){updatedOpenedCellList[selectedIndex-mineSize-1]=1;updatedOpenedCellList=generatedGrid[selectedIndex-mineSize-1]===0?openSurroundingCells(selectedIndex-mineSize-1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-mineSize-1]===-1;}}}else{let flagcount=0;updatedOpenedCellList[selectedIndex+1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-mineSize]===-1&&flagcount++;updatedOpenedCellList[selectedIndex+mineSize]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-mineSize+1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex-mineSize-1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex+mineSize+1]===-1&&flagcount++;updatedOpenedCellList[selectedIndex+mineSize-1]===-1&&flagcount++;if(updatedOpenedCellList[selectedIndex+1]!==-1&&updatedOpenedCellList[selectedIndex-1]!==-1&&updatedOpenedCellList[selectedIndex+mineSize]!==-1&&updatedOpenedCellList[selectedIndex-mineSize]!==-1&&updatedOpenedCellList[selectedIndex+mineSize-1]!==-1&&updatedOpenedCellList[selectedIndex-mineSize-1]!==-1&&updatedOpenedCellList[selectedIndex+mineSize+1]!==-1&&updatedOpenedCellList[selectedIndex-mineSize+1]!==-1){blinkerTile([selectedIndex+1,selectedIndex-1,selectedIndex+mineSize,selectedIndex+mineSize-1,selectedIndex+mineSize+1,selectedIndex-mineSize,selectedIndex-mineSize-1,selectedIndex-mineSize+1]);}else if(flagcount===generatedGrid[selectedIndex]){if(updatedOpenedCellList[selectedIndex+1]!==-1){updatedOpenedCellList[selectedIndex+1]=1;updatedOpenedCellList=generatedGrid[selectedIndex+1]===0?openSurroundingCells(selectedIndex+1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+1]===-1;}if(updatedOpenedCellList[selectedIndex-1]!==-1){updatedOpenedCellList[selectedIndex-1]=1;updatedOpenedCellList=generatedGrid[selectedIndex-1]===0?openSurroundingCells(selectedIndex-1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-1]===-1;}if(updatedOpenedCellList[selectedIndex+mineSize]!==-1){updatedOpenedCellList[selectedIndex+mineSize]=1;updatedOpenedCellList=generatedGrid[selectedIndex+mineSize]===0?openSurroundingCells(selectedIndex+mineSize,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+mineSize]===-1;}if(updatedOpenedCellList[selectedIndex+mineSize-1]!==-1){updatedOpenedCellList[selectedIndex+mineSize-1]=1;updatedOpenedCellList=generatedGrid[selectedIndex+mineSize-1]===0?openSurroundingCells(selectedIndex+mineSize-1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+mineSize-1]===-1;}if(updatedOpenedCellList[selectedIndex+mineSize+1]!==-1){updatedOpenedCellList[selectedIndex+mineSize+1]=1;updatedOpenedCellList=generatedGrid[selectedIndex+mineSize+1]===0?openSurroundingCells(selectedIndex+mineSize+1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex+mineSize+1]===-1;}if(updatedOpenedCellList[selectedIndex-mineSize]!==-1){updatedOpenedCellList[selectedIndex-mineSize]=1;updatedOpenedCellList=generatedGrid[selectedIndex-mineSize]===0?openSurroundingCells(selectedIndex-mineSize,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-mineSize]===-1;}if(updatedOpenedCellList[selectedIndex-mineSize-1]!==-1){updatedOpenedCellList[selectedIndex-mineSize-1]=1;updatedOpenedCellList=generatedGrid[selectedIndex-mineSize-1]===0?openSurroundingCells(selectedIndex-mineSize-1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-mineSize-1]===-1;}if(updatedOpenedCellList[selectedIndex-mineSize+1]!==-1){updatedOpenedCellList[selectedIndex-mineSize+1]=1;updatedOpenedCellList=generatedGrid[selectedIndex-mineSize+1]===0?openSurroundingCells(selectedIndex-mineSize+1,updatedOpenedCellList,generatedGrid,mineSize):updatedOpenedCellList;bombClicked=bombClicked||generatedGrid[selectedIndex-mineSize+1]===-1;}}}}setOpenedCellsList(updatedOpenedCellList);setIsBombClicked(bombClicked);}else{updatedOpenedCellList[selectedIndex]=1;setOpenedCellsList(updatedOpenedCellList);}};const onLongClickCell=selectedIndex=>{const updatedOpenedCellList=[...openedCellsList];if(updatedOpenedCellList[selectedIndex]!==1){updatedOpenedCellList[selectedIndex]=updatedOpenedCellList[selectedIndex]===-1?0:-1;setOpenedCellsList(updatedOpenedCellList);}};const flag=openStatus=>/*#__PURE__*/_jsx(\"div\",{className:\"flag\",children:/*#__PURE__*/_jsx(\"div\",{className:\"base \".concat(openStatus===0&&'base-red')})});const returnMineRows=()=>{return generatedGrid.map((gridValue,index)=>/*#__PURE__*/_createElement(\"div\",{className:\"mineTile  \".concat(isDarkMode?'mineDark':'mineLight',\" \").concat(openedCellsList[index]===-1&&'flaggedTile',\" \").concat(openedCellsList[index]===1&&'not-A-Mine',\" \").concat(openedCellsList[index]===1&&gridValue===-1&&'mine'),...handlers(index),onContextMenu:e=>{e.preventDefault();!isBombClicked&&onLongClickCell(index);},style:isPaused?unmountedStyle:mountedStyle,key:\"mine-\".concat(index),id:\"mine-\".concat(index)},openedCellsList[index]&&openedCellsList[index]!==-1&&!isPaused||isBombClicked?gridValue===-1?flag(openedCellsList[index]):gridValue:''));};const mountedStyle={animation:\"inAnimation 250ms ease-in\"};const unmountedStyle={animation:\"outAnimation 270ms ease-out\",animationFillMode:\"forwards\"};const onResetClick=()=>{setOpenedCellsList(new Array(mineSize*mineSize).fill(0));updateGeneratedGrid(calculateMatrix(mineSize,selectedDificulty));setIsBombClicked(false);setAllMinesIsolated(false);};const returnGameStats=()=>{var _gameStats$winPercent;// const stats = findGameStatsForDificulty(selectedDificulty);\n// console.log(stats)\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"statsContainer\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"statsHeader\",children:\"STATS\"}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Games Played : \",gameStats.gamesPlayed]}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Games Won : \",gameStats.wins]}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Games Lost : \",gameStats.losses]}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Best Time : \",gameStats.bestTime===''?'No Wins Yet':gameStats.bestTime]}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Average Time : \",gameStats.averageTime===''?'No Wins Yet':gameStats.averageTime]}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Win Percentage : \",(_gameStats$winPercent=gameStats.winPercentage)===null||_gameStats$winPercent===void 0?void 0:_gameStats$winPercent.toFixed(),\"%\"]})]});};return/*#__PURE__*/_jsxs(\"div\",{className:\"mineGridContainer\",onContextMenu:e=>{e.preventDefault();},children:[/*#__PURE__*/_jsx(Timer,{allMinesIsolated:allMinesIsolated,isBombClicked:isBombClicked,isDarkMode:isDarkMode,isPaused:isPaused,onResetClick:onResetClick,setPausedState:setPausedState,timer:timer,setTimer:setTimer}),/*#__PURE__*/_jsxs(\"div\",{className:\"mineContainer \".concat(isDarkMode?'dark':'light'),children:[returnMineRows(),isBombClicked&&/*#__PURE__*/_jsxs(\"div\",{className:isDarkMode?'pausedScreenDark':'pausedScreen',style:mountedStyle,children:[/*#__PURE__*/_jsx(\"span\",{className:\"gameOverText\",children:\"GAME OVER\"}),returnGameStats()]}),!isBombClicked&&allMinesIsolated&&/*#__PURE__*/_jsxs(\"div\",{className:isDarkMode?'pausedScreenDark':'pausedScreen',style:mountedStyle,children:[/*#__PURE__*/_jsx(\"span\",{className:\"youWinText\",children:\"YOU WIN!\"}),returnGameStats()]}),isPaused&&/*#__PURE__*/_jsxs(\"div\",{className:isDarkMode?'pausedScreenDark':'pausedScreen',style:mountedStyle,children:[/*#__PURE__*/_jsx(\"div\",{className:\"pauseIcon\"}),/*#__PURE__*/_jsx(\"span\",{children:\"PAUSED\"})]})]})]});}export default MineGrid;","map":{"version":3,"names":["useEffect","useState","LongPressEventType","useLongPress","calculateMatrix","convertToTime","matchAllOpenedTiles","openSurroundingCells","Timer","updateGameStats","jsx","_jsx","createElement","_createElement","jsxs","_jsxs","MineGrid","_ref","isDarkMode","selectedDificulty","mineSize","isBombClicked","setIsBombClicked","allMinesIsolated","setAllMinesIsolated","openedCellsList","setOpenedCellsList","Array","fill","generatedGrid","updateGeneratedGrid","isPaused","setPausedState","timer","setTimer","gameStats","setGameStats","gameTime","gameWon","blinkerTile","tileList","forEach","tileIndex","_document$getElementB","document","getElementById","concat","classList","add","setTimeout","_document$getElementB2","remove","bind","undefined","onFinish","event","meta","preventDefault","onLongClickCell","context","onCancel","button","onClickCell","filterEvents","threshold","captureEvent","cancelOnMovement","cancelOutsideElement","detect","Pointer","handlers","selectedIndex","updatedOpenedCellList","bombClicked","flagcount","flag","openStatus","className","children","returnMineRows","map","gridValue","index","onContextMenu","e","style","unmountedStyle","mountedStyle","key","id","animation","animationFillMode","onResetClick","returnGameStats","_gameStats$winPercent","gamesPlayed","wins","losses","bestTime","averageTime","winPercentage","toFixed"],"sources":["/Users/anubhavkhanna/Desktop/Code Repos/MineMaster/src/Components/MineGrid/MineGrid.tsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { LongPressEventType, useLongPress } from \"use-long-press\";\nimport calculateMatrix from '../../utils/gridGenerator';\nimport './MineGrid.css'\nimport { convertToTime, matchAllOpenedTiles, openSurroundingCells } from '../../utils/Utilities';\nimport Timer from './Timer';\nimport { findGameStatsForDificulty, updateGameStats } from '../../utils/localStorage';\n\ninterface IStats {\n  gamesPlayed?: number;\n  wins?: number;\n  losses?: number;\n  winPercentage?: number;\n  bestTime?: string;\n  averageTime?: string;\n}\n\nfunction MineGrid({isDarkMode, selectedDificulty}: {isDarkMode: boolean, selectedDificulty: string}) {\n  const mineSize = 9;\n  const [isBombClicked, setIsBombClicked] = useState(false);\n  const [allMinesIsolated, setAllMinesIsolated] = useState(false);\n  const [openedCellsList, setOpenedCellsList] = useState(new Array(mineSize*mineSize).fill(0));\n  const [generatedGrid, updateGeneratedGrid] = useState(new Array(mineSize*mineSize).fill(0));\n  const [isPaused, setPausedState] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [gameStats, setGameStats] = useState<IStats>({});\n  \n  useEffect(() => {\n    updateGeneratedGrid(calculateMatrix(mineSize, selectedDificulty));\n  }, []);\n\n  useEffect(() => {\n    if (allMinesIsolated) {\n      setGameStats(updateGameStats(selectedDificulty, {gameTime: convertToTime(timer), gameWon: true}));\n    }\n    if (isBombClicked) {\n      setGameStats(updateGameStats(selectedDificulty, {gameTime: convertToTime(timer), gameWon: false}));\n    }\n  }, [allMinesIsolated, timer, isBombClicked]);\n\n  useEffect(() => {\n    (matchAllOpenedTiles(openedCellsList, generatedGrid) && setAllMinesIsolated(true));\n  }, [openedCellsList]);\n\n  const blinkerTile = (tileList: Array<Number>) => {\n    tileList.forEach((tileIndex) => {\n      // @ts-ignore\n      openedCellsList[tileIndex] !== 1 && document.getElementById(`mine-${tileIndex}`)?.classList.add('blinker');\n    })\n\n    setTimeout(() => {\n      tileList.forEach((tileIndex: Number) => {\n        document.getElementById(`mine-${tileIndex}`)?.classList.remove('blinker')\n      })\n    }, 1000);\n  }\n\n  const bind = useLongPress(() => undefined, {\n    onFinish: (event, meta: {context ?:number|undefined}) => {\n      event.preventDefault();\n      !isBombClicked && onLongClickCell(meta.context || 0);\n    },\n    onCancel: (event, meta: {context ?:number|undefined}) => {\n      // @ts-ignore\n      !isBombClicked && event.button !==2 && onClickCell(meta.context || 0);\n    },\n    filterEvents: (event) => true,\n    threshold: 500,\n    captureEvent: true,\n    cancelOnMovement: false,\n    cancelOutsideElement: true,\n    detect: LongPressEventType.Pointer,\n  });\n  const handlers = (selectedIndex: number) => bind(selectedIndex);\n\n  const onClickCell = (selectedIndex: number) => {\n    let updatedOpenedCellList = [...openedCellsList];\n\n    if (generatedGrid[selectedIndex] === -1) {\n      setIsBombClicked(true);\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList)\n    } else if (generatedGrid[selectedIndex] === 0) {\n      setOpenedCellsList(openSurroundingCells(selectedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n    } else if (updatedOpenedCellList[selectedIndex] === 1) {\n      let bombClicked = false;\n      if (selectedIndex < mineSize) {\n        if (selectedIndex === 0) {\n          let flagcount = 0;\n          updatedOpenedCellList[selectedIndex + 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex + mineSize] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex + mineSize + 1] === -1 && flagcount++;\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1 && updatedOpenedCellList[selectedIndex + mineSize] !== -1 && updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n            blinkerTile([selectedIndex + 1, selectedIndex + mineSize, selectedIndex + mineSize + 1]);\n          } else if(flagcount === generatedGrid[selectedIndex]) {\n            if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex+1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex+mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize + 1] === 0 ? openSurroundingCells(selectedIndex+mineSize+1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n            }\n          }\n        } else if (selectedIndex === mineSize-1) {\n          let flagcount = 0;\n          updatedOpenedCellList[selectedIndex - 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex + mineSize] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex + mineSize - 1] === -1 && flagcount++;\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1 && updatedOpenedCellList[selectedIndex + mineSize] !== -1 && updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n            blinkerTile([selectedIndex - 1, selectedIndex + mineSize, selectedIndex + mineSize - 1]);\n          } else if(flagcount === generatedGrid[selectedIndex]) {\n            if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n              updatedOpenedCellList[selectedIndex - 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex-1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize - 1] === 0 ? openSurroundingCells(selectedIndex + mineSize -1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n            }\n          }\n        } else {\n          let flagcount = 0;\n          updatedOpenedCellList[selectedIndex + 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex + mineSize] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex + mineSize + 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex + mineSize - 1] === -1 && flagcount++;\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1\n            && updatedOpenedCellList[selectedIndex - 1] !== -1\n            && updatedOpenedCellList[selectedIndex + mineSize] !== -1\n            && updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1\n            && updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n              blinkerTile([selectedIndex + 1, selectedIndex - 1, selectedIndex + mineSize, selectedIndex + mineSize + 1, selectedIndex + mineSize - 1]);\n          } else if (flagcount === generatedGrid[selectedIndex]) {\n            if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n              updatedOpenedCellList[selectedIndex - 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize + 1] === 0 ? openSurroundingCells(selectedIndex + mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize - 1] === 0 ? openSurroundingCells(selectedIndex + mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n            }\n          }\n        }\n      } else if (selectedIndex >= (mineSize*(mineSize-1))) {\n        if (selectedIndex%mineSize === 0) {\n          let flagcount = 0;\n          updatedOpenedCellList[selectedIndex + 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - mineSize] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - mineSize + 1] === -1 && flagcount++;\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1 && updatedOpenedCellList[selectedIndex - mineSize] !== -1 && updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            blinkerTile([selectedIndex + 1, selectedIndex - mineSize, selectedIndex - mineSize + 1]);\n          } else if (flagcount === generatedGrid[selectedIndex]) {\n            if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n              updatedOpenedCellList[selectedIndex - mineSize] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - mineSize + 1] === 0 ? openSurroundingCells(selectedIndex - mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n            }\n          }\n        } else if (selectedIndex%mineSize === mineSize-1) {\n          let flagcount = 0;\n          updatedOpenedCellList[selectedIndex - 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - mineSize] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - mineSize - 1] === -1 && flagcount++;\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1 && updatedOpenedCellList[selectedIndex - mineSize] !== -1 && updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            blinkerTile([selectedIndex - 1, selectedIndex - mineSize, selectedIndex - mineSize - 1]);\n          } else if (flagcount === generatedGrid[selectedIndex]) {\n            if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n              updatedOpenedCellList[selectedIndex - 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n              updatedOpenedCellList[selectedIndex - mineSize] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n              updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - mineSize - 1] === 0 ? openSurroundingCells(selectedIndex - mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n            }\n          }\n        } else {\n          let flagcount = 0;\n          updatedOpenedCellList[selectedIndex + 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - mineSize] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - mineSize + 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - mineSize - 1] === -1 && flagcount++;\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1\n            && updatedOpenedCellList[selectedIndex - 1] !== -1\n            && updatedOpenedCellList[selectedIndex - mineSize] !== -1\n            && updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1\n            && updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n              blinkerTile([selectedIndex + 1, selectedIndex - 1, selectedIndex - mineSize, selectedIndex - mineSize + 1, selectedIndex - mineSize - 1]);\n          } else if (flagcount === generatedGrid[selectedIndex]) {\n            if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n              updatedOpenedCellList[selectedIndex - 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n              updatedOpenedCellList[selectedIndex - mineSize] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - mineSize + 1] === 0 ? openSurroundingCells(selectedIndex - mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n              updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - mineSize - 1] === 0 ? openSurroundingCells(selectedIndex - mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n            }\n          }\n        }\n      } else {\n        if (selectedIndex%mineSize === 0) {\n          let flagcount = 0;\n          updatedOpenedCellList[selectedIndex + 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - mineSize] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex + mineSize] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - mineSize + 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex + mineSize + 1] === -1 && flagcount++;\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1\n            && updatedOpenedCellList[selectedIndex + mineSize] !== -1\n            && updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1\n            && updatedOpenedCellList[selectedIndex - mineSize] !== -1\n            && updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n              blinkerTile([selectedIndex + 1, selectedIndex + mineSize, selectedIndex + mineSize + 1, selectedIndex - mineSize, selectedIndex - mineSize + 1]);\n          } else if (flagcount === generatedGrid[selectedIndex]) {\n            if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize + 1] === 0 ? openSurroundingCells(selectedIndex + mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n              updatedOpenedCellList[selectedIndex - mineSize] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - mineSize + 1] === 0 ? openSurroundingCells(selectedIndex - mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n            }\n          }\n        } else if (selectedIndex%mineSize === mineSize - 1) {\n          let flagcount = 0;\n          updatedOpenedCellList[selectedIndex - 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex + mineSize] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - mineSize] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex + mineSize - 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - mineSize - 1] === -1 && flagcount++;\n          if (updatedOpenedCellList[selectedIndex - 1] !== -1\n            && updatedOpenedCellList[selectedIndex + mineSize] !== -1\n            && updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1\n            && updatedOpenedCellList[selectedIndex - mineSize] !== -1\n            && updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n            blinkerTile([selectedIndex - 1, selectedIndex + mineSize, selectedIndex + mineSize - 1, selectedIndex - mineSize, selectedIndex - mineSize - 1]);\n          } else if (flagcount === generatedGrid[selectedIndex]) {\n            if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n              updatedOpenedCellList[selectedIndex - 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize - 1] === 0 ? openSurroundingCells(selectedIndex + mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n              updatedOpenedCellList[selectedIndex - mineSize] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n              updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - mineSize - 1] === 0 ? openSurroundingCells(selectedIndex - mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n            }\n          }\n        } else {\n          let flagcount = 0;\n          updatedOpenedCellList[selectedIndex + 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - mineSize] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex + mineSize] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - mineSize + 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex - mineSize - 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex + mineSize + 1] === -1 && flagcount++;\n          updatedOpenedCellList[selectedIndex + mineSize - 1] === -1 && flagcount++;\n          if (updatedOpenedCellList[selectedIndex + 1] !== -1\n            && updatedOpenedCellList[selectedIndex - 1] !== -1\n            && updatedOpenedCellList[selectedIndex + mineSize] !== -1\n            && updatedOpenedCellList[selectedIndex - mineSize] !== -1\n            && updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1\n            && updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1\n            && updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1\n            && updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n            blinkerTile([selectedIndex + 1, selectedIndex - 1, selectedIndex + mineSize, selectedIndex + mineSize - 1, selectedIndex + mineSize + 1,selectedIndex - mineSize, selectedIndex - mineSize -1, selectedIndex - mineSize + 1]);\n          } else if (flagcount === generatedGrid[selectedIndex]) {\n            if (updatedOpenedCellList[selectedIndex + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + 1] === 0 ? openSurroundingCells(selectedIndex + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - 1] !== -1) {\n              updatedOpenedCellList[selectedIndex - 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - 1] === 0 ? openSurroundingCells(selectedIndex - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize] === 0 ? openSurroundingCells(selectedIndex + mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize - 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize - 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize - 1] === 0 ? openSurroundingCells(selectedIndex + mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize - 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex + mineSize + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex + mineSize + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex + mineSize + 1] === 0 ? openSurroundingCells(selectedIndex + mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex + mineSize + 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - mineSize] !== -1) {\n              updatedOpenedCellList[selectedIndex - mineSize] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - mineSize] === 0 ? openSurroundingCells(selectedIndex - mineSize, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - mineSize - 1] !== -1) {\n              updatedOpenedCellList[selectedIndex - mineSize - 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - mineSize - 1] === 0 ? openSurroundingCells(selectedIndex - mineSize - 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize - 1] === -1;\n            }\n            if (updatedOpenedCellList[selectedIndex - mineSize + 1] !== -1) {\n              updatedOpenedCellList[selectedIndex - mineSize + 1] = 1;\n              updatedOpenedCellList = generatedGrid[selectedIndex - mineSize + 1] === 0 ? openSurroundingCells(selectedIndex - mineSize + 1, updatedOpenedCellList, generatedGrid, mineSize) : updatedOpenedCellList;\n              bombClicked = bombClicked || generatedGrid[selectedIndex - mineSize + 1] === -1;\n            }\n          }\n        }\n      }\n      setOpenedCellsList(updatedOpenedCellList);\n      setIsBombClicked(bombClicked);\n    } else {\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList);\n    }\n  }\n\n  const onLongClickCell = (selectedIndex: number) => {\n    const updatedOpenedCellList = [...openedCellsList];\n    if (updatedOpenedCellList[selectedIndex] !== 1) {\n      updatedOpenedCellList[selectedIndex] = updatedOpenedCellList[selectedIndex] === -1 ? 0 : -1;\n      setOpenedCellsList(updatedOpenedCellList);\n    }\n  }\n\n  const flag = (openStatus: number) => (\n    <div className='flag'>\n      <div className={`base ${openStatus === 0 && 'base-red'}`} />\n    </div>\n  );\n\n  const returnMineRows = () => {\n    return generatedGrid.map((gridValue: number, index: number) => (\n      <div\n        className={`mineTile  ${isDarkMode ? 'mineDark' : 'mineLight'} ${openedCellsList[index] === -1 && 'flaggedTile'} ${openedCellsList[index] === 1 && 'not-A-Mine'} ${openedCellsList[index] === 1 && gridValue === -1 && 'mine'}`}\n        {...handlers(index)}\n        onContextMenu={(e) => {e.preventDefault();!isBombClicked && onLongClickCell(index);}}\n        style={isPaused ? unmountedStyle : mountedStyle}\n        key={`mine-${index}`}\n        id={`mine-${index}`}\n      >\n        {(openedCellsList[index] && openedCellsList[index] !== -1 && !isPaused) || isBombClicked ? (gridValue === -1 ? flag(openedCellsList[index]) : gridValue) : ''}\n      </div>\n    ))\n  }\n\n  const mountedStyle = {\n    animation: \"inAnimation 250ms ease-in\"\n  };\n  const unmountedStyle = {\n    animation: \"outAnimation 270ms ease-out\",\n    animationFillMode: \"forwards\"\n  };\n\n  const onResetClick = () => {\n    setOpenedCellsList(new Array(mineSize*mineSize).fill(0));\n    updateGeneratedGrid(calculateMatrix(mineSize, selectedDificulty));\n    setIsBombClicked(false);\n    setAllMinesIsolated(false);\n  }\n\n  const returnGameStats = () => {\n    // const stats = findGameStatsForDificulty(selectedDificulty);\n    // console.log(stats)\n    return (\n      <div className='statsContainer'>\n        <span className='statsHeader'>STATS</span>\n        <span>Games Played : {gameStats.gamesPlayed}</span>\n        <span>Games Won : {gameStats.wins}</span>\n        <span>Games Lost : {gameStats.losses}</span>\n        <span>Best Time : {gameStats.bestTime === '' ? 'No Wins Yet' : gameStats.bestTime}</span>\n        <span>Average Time : {gameStats.averageTime === '' ? 'No Wins Yet' : gameStats.averageTime}</span>\n        <span>Win Percentage : {gameStats.winPercentage?.toFixed()}%</span>\n      </div>\n    )\n  };\n\n  return (\n    <div className='mineGridContainer' onContextMenu={(e) => {e.preventDefault();}}>\n      <Timer\n        allMinesIsolated={allMinesIsolated}\n        isBombClicked={isBombClicked}\n        isDarkMode={isDarkMode}\n        isPaused={isPaused}\n        onResetClick={onResetClick}\n        setPausedState={setPausedState}\n        timer={timer}\n        setTimer={setTimer}\n      />\n      <div className={`mineContainer ${isDarkMode ? 'dark' : 'light'}`}>\n        {returnMineRows()}\n\n        {isBombClicked && (\n          <div className={isDarkMode ? 'pausedScreenDark' : 'pausedScreen'} style={mountedStyle} >\n            <span className='gameOverText'>GAME OVER</span>\n            {returnGameStats()}\n          </div>\n        )}\n        {!isBombClicked && allMinesIsolated && (\n          <div className={isDarkMode ? 'pausedScreenDark' : 'pausedScreen'} style={mountedStyle} >\n            <span className='youWinText'>YOU WIN!</span>\n            {returnGameStats()}\n          </div>\n        )}\n        {isPaused && (\n          <div className={isDarkMode ? 'pausedScreenDark' : 'pausedScreen'} style={mountedStyle} >\n            <div className='pauseIcon' />\n            <span>PAUSED</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default MineGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}