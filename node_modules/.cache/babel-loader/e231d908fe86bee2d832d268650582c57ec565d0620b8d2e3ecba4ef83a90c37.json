{"ast":null,"code":"var _jsxFileName = \"/Users/anubhavkhanna/Desktop/Code Repos/minemaster/src/Components/MineGrid/MineGrid.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { LongPressEventType, useLongPress } from \"use-long-press\";\nimport calculateMatrix from '../../utils/gridGenerator';\nimport './MineGrid.css';\nimport { matchAllOpenedTiles, openSurroundingCells } from '../../utils/Utilities';\nimport Timer from './Timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MineGrid({\n  isDarkMode\n}) {\n  _s();\n  const mineSize = 9,\n    dificulty = 'EASY';\n  const [isBombClicked, setIsBombClicked] = useState(false);\n  const [allMinesIsolated, setAllMinesIsolated] = useState(false);\n  const [openedCellsList, setOpenedCellsList] = useState(new Array(mineSize * mineSize).fill(0));\n  const [generatedGrid, updateGeneratedGrid] = useState(new Array(mineSize * mineSize));\n  const [isPaused, setPausedState] = useState(false);\n  useEffect(() => {\n    matchAllOpenedTiles(openedCellsList, generatedGrid) && setAllMinesIsolated(true);\n  }, [openedCellsList]);\n  useEffect(() => {\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n  }, []);\n  const bind = useLongPress(() => undefined, {\n    onFinish: (event, meta) => {\n      onLongClickCell(meta.context || 0);\n    },\n    onCancel: (event, meta) => {\n      onClickCell(meta.context || 0);\n    },\n    filterEvents: event => true,\n    threshold: 500,\n    captureEvent: true,\n    cancelOnMovement: false,\n    cancelOutsideElement: true,\n    detect: LongPressEventType.Pointer\n  });\n  const handlers = selectedIndex => bind(selectedIndex);\n  const onClickCell = selectedIndex => {\n    const updatedOpenedCellList = [...openedCellsList];\n    if (generatedGrid[selectedIndex]) {\n      generatedGrid[selectedIndex] === -1 && setIsBombClicked(true);\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList);\n    } else {\n      setOpenedCellsList(openSurroundingCells(selectedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n    }\n  };\n  const onLongClickCell = selectedIndex => {\n    const updatedOpenedCellList = [...openedCellsList];\n    updatedOpenedCellList[selectedIndex] = updatedOpenedCellList[selectedIndex] === -1 ? 0 : -1;\n    setOpenedCellsList(updatedOpenedCellList);\n  };\n  const returnMineRows = () => {\n    return generatedGrid.map((gridValue, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mineTile  ${isDarkMode ? 'mineDark' : 'mineLight'} ${openedCellsList[index] === -1 && 'flaggedTile'} ${openedCellsList[index] === 1 && 'not-A-Mine'} ${openedCellsList[index] === 1 && gridValue === -1 && 'mine'}`,\n      ...handlers(index),\n      style: isPaused ? unmountedStyle : mountedStyle,\n      children: openedCellsList[index] && openedCellsList[index] !== -1 && !isPaused ? gridValue : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this));\n  };\n  const mountedStyle = {\n    animation: \"inAnimation 250ms ease-in\"\n  };\n  const unmountedStyle = {\n    animation: \"outAnimation 270ms ease-out\",\n    animationFillMode: \"forwards\"\n  };\n  const onResetClick = () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Timer, {\n      isDarkMode: isDarkMode,\n      isPaused: isPaused,\n      setPausedState: setPausedState,\n      onResetClick: onResetClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mineContainer ${isDarkMode ? 'dark' : 'light'}`,\n      children: [returnMineRows(), isPaused && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: isDarkMode ? 'pausedScreenDark' : 'pausedScreen',\n        style: mountedStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pauseIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"PAUSED\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(MineGrid, \"KvDX8p6jeVDdyC9ks08lyhvp4/Y=\", false, function () {\n  return [useLongPress];\n});\n_c = MineGrid;\nexport default MineGrid;\nvar _c;\n$RefreshReg$(_c, \"MineGrid\");","map":{"version":3,"names":["useEffect","useState","LongPressEventType","useLongPress","calculateMatrix","matchAllOpenedTiles","openSurroundingCells","Timer","jsxDEV","_jsxDEV","MineGrid","isDarkMode","_s","mineSize","dificulty","isBombClicked","setIsBombClicked","allMinesIsolated","setAllMinesIsolated","openedCellsList","setOpenedCellsList","Array","fill","generatedGrid","updateGeneratedGrid","isPaused","setPausedState","bind","undefined","onFinish","event","meta","onLongClickCell","context","onCancel","onClickCell","filterEvents","threshold","captureEvent","cancelOnMovement","cancelOutsideElement","detect","Pointer","handlers","selectedIndex","updatedOpenedCellList","returnMineRows","map","gridValue","index","className","style","unmountedStyle","mountedStyle","children","fileName","_jsxFileName","lineNumber","columnNumber","animation","animationFillMode","onResetClick","_c","$RefreshReg$"],"sources":["/Users/anubhavkhanna/Desktop/Code Repos/minemaster/src/Components/MineGrid/MineGrid.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { LongPressEventType, useLongPress } from \"use-long-press\";\nimport calculateMatrix from '../../utils/gridGenerator';\nimport './MineGrid.css'\nimport { matchAllOpenedTiles, openSurroundingCells } from '../../utils/Utilities';\nimport Timer from './Timer';\n\nfunction MineGrid({isDarkMode}: {isDarkMode: boolean}) {\n  const mineSize = 9, dificulty = 'EASY';\n  const [isBombClicked, setIsBombClicked] = useState(false);\n  const [allMinesIsolated, setAllMinesIsolated] = useState(false);\n  const [openedCellsList, setOpenedCellsList] = useState(new Array(mineSize*mineSize).fill(0));\n  const [generatedGrid, updateGeneratedGrid] = useState(new Array(mineSize*mineSize));\n  const [isPaused, setPausedState] = useState(false);\n\n  useEffect(() => {\n    (matchAllOpenedTiles(openedCellsList, generatedGrid) && setAllMinesIsolated(true));\n  }, [openedCellsList]);\n\n  useEffect(() => {\n    updateGeneratedGrid(calculateMatrix(mineSize, dificulty));\n  }, []);\n\n  const bind = useLongPress(() => undefined, {\n    onFinish: (event, meta: {context ?:number|undefined}) => {\n      onLongClickCell(meta.context || 0);\n    },\n    onCancel: (event, meta: {context ?:number|undefined}) => {\n      onClickCell(meta.context || 0);\n    },\n    filterEvents: (event) => true,\n    threshold: 500,\n    captureEvent: true,\n    cancelOnMovement: false,\n    cancelOutsideElement: true,\n    detect: LongPressEventType.Pointer,\n  });\n  const handlers = (selectedIndex: number) => bind(selectedIndex);\n\n  const onClickCell = (selectedIndex: number) => {\n    const updatedOpenedCellList = [...openedCellsList];\n\n    if (generatedGrid[selectedIndex]) {\n      generatedGrid[selectedIndex] === -1 && setIsBombClicked(true);\n      updatedOpenedCellList[selectedIndex] = 1;\n      setOpenedCellsList(updatedOpenedCellList)\n    } else {\n      setOpenedCellsList(openSurroundingCells(selectedIndex, updatedOpenedCellList, generatedGrid, mineSize));\n    }\n  }\n\n  const onLongClickCell = (selectedIndex: number) => {\n    const updatedOpenedCellList = [...openedCellsList];\n    updatedOpenedCellList[selectedIndex] = updatedOpenedCellList[selectedIndex] === -1 ? 0 : -1;\n    setOpenedCellsList(updatedOpenedCellList);\n  }\n\n  const returnMineRows = () => {\n    return generatedGrid.map((gridValue: number, index: number) => (\n      <div\n        className={`mineTile  ${isDarkMode ? 'mineDark' : 'mineLight'} ${openedCellsList[index] === -1 && 'flaggedTile'} ${openedCellsList[index] === 1 && 'not-A-Mine'} ${openedCellsList[index] === 1 && gridValue === -1 && 'mine'}`}\n        {...handlers(index)}\n        style={isPaused ? unmountedStyle : mountedStyle}\n      >\n        {openedCellsList[index] && openedCellsList[index] !== -1 && !isPaused ? gridValue : ''}\n      </div>\n    ))\n  }\n\n  const mountedStyle = {\n    animation: \"inAnimation 250ms ease-in\"\n  };\n  const unmountedStyle = {\n    animation: \"outAnimation 270ms ease-out\",\n    animationFillMode: \"forwards\"\n  };\n\n  const onResetClick = () => {\n\n  }\n\n  return (\n    <div>\n      <Timer isDarkMode={isDarkMode} isPaused={isPaused} setPausedState={setPausedState} onResetClick={onResetClick} />\n      <div className={`mineContainer ${isDarkMode ? 'dark' : 'light'}`}>\n        {returnMineRows()}\n        {isPaused && (\n          <div className={isDarkMode ? 'pausedScreenDark' : 'pausedScreen'} style={mountedStyle} >\n            <div className='pauseIcon' />\n            <span>PAUSED</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default MineGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}